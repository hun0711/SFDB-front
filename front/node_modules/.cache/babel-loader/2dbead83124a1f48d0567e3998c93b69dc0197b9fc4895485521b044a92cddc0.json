{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\carax\\\\Desktop\\\\\\uC0AC\\uC774\\uB4DC \\uD504\\uB85C\\uC81D\\uD2B8\\\\SFDB-Project\\\\front\\\\src\\\\pages\\\\detail\\\\MovieDetailMidSection2.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { directorInfoByNameDB, directorInfoDB } from '../../axios/main/movieLogic';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MovieDetailMidSection2 = ({\n  movieDetail\n}) => {\n  _s();\n  const [directors, setDirectors] = useState([]);\n  console.log(directors[0]);\n  useEffect(() => {\n    const getDirectorInfo = async directorId => {\n      try {\n        const res = await directorInfoDB(directorId);\n        return res;\n      } catch (error) {\n        console.log('감독 정보 로드 실패 : ', error);\n        return null;\n      }\n    };\n    const fetchDirectorsInfo = async () => {\n      const directorIds = movieDetail.directorIds ? movieDetail.directorIds.split(',') : [];\n      const directorNms = movieDetail.directorNm ? movieDetail.directorNm.split(',') : [];\n      const directorsInfo = await Promise.all(directorIds.map(async (directorId, index) => {\n        if (directorId) {\n          return await getDirectorInfo(directorId);\n        } else if (directorNms[index]) {\n          return await getDirectorInfoByName(directorNms[index]);\n        }\n        return null;\n      }));\n      setDirectors(directorsInfo.filter(info => info !== null));\n      console.log(directors);\n    };\n    fetchDirectorsInfo();\n  }, [movieDetail.directorIds]);\n  const getDirectorInfoByName = async directorNm => {\n    try {\n      const res = await directorInfoByNameDB(directorNm);\n      return res;\n    } catch (error) {\n      console.log('감독 정보 로드 실패 : ', error);\n      return null;\n    }\n  };\n  const creditInfoStyle = {};\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: creditInfoStyle,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"\\uAC10\\uB3C5 \\uC815\\uBCF4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), directors.map((director, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\uC774\\uB984: \", director.directorNm]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 6\n    }, this)\n  }, void 0, false);\n};\n_s(MovieDetailMidSection2, \"MOMXR1SbmS2ZUbc3rI2O9ok3sSA=\");\n_c = MovieDetailMidSection2;\nexport default MovieDetailMidSection2;\nvar _c;\n$RefreshReg$(_c, \"MovieDetailMidSection2\");","map":{"version":3,"names":["React","useEffect","useState","directorInfoByNameDB","directorInfoDB","jsxDEV","_jsxDEV","Fragment","_Fragment","MovieDetailMidSection2","movieDetail","_s","directors","setDirectors","console","log","getDirectorInfo","directorId","res","error","fetchDirectorsInfo","directorIds","split","directorNms","directorNm","directorsInfo","Promise","all","map","index","getDirectorInfoByName","filter","info","creditInfoStyle","children","style","fileName","_jsxFileName","lineNumber","columnNumber","director","_c","$RefreshReg$"],"sources":["C:/Users/carax/Desktop/사이드 프로젝트/SFDB-Project/front/src/pages/detail/MovieDetailMidSection2.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { directorInfoByNameDB, directorInfoDB } from '../../axios/main/movieLogic'\r\n\r\nconst MovieDetailMidSection2 = ({ movieDetail }) => {\r\n  const [directors, setDirectors] = useState([])\r\n  console.log(directors[0]);\r\n\r\n  useEffect(() => {\r\n    const getDirectorInfo = async (directorId) => {\r\n      try {\r\n        const res = await directorInfoDB(directorId)\r\n        return res;\r\n      } catch (error) {\r\n        console.log('감독 정보 로드 실패 : ', error);\r\n        return null;\r\n      }\r\n    }\r\n\r\n    const fetchDirectorsInfo = async () => { \r\n      const directorIds = movieDetail.directorIds ? movieDetail.directorIds.split(',') : [];\r\n      const directorNms = movieDetail.directorNm ? movieDetail.directorNm.split(',') : [];\r\n\r\n      const directorsInfo = await Promise.all(\r\n        directorIds.map(async (directorId, index) => {\r\n          if (directorId) {\r\n            return await getDirectorInfo(directorId);\r\n          } else if (directorNms[index]) {\r\n            return await getDirectorInfoByName(directorNms[index]);\r\n          }\r\n          return null;\r\n        })\r\n      );\r\n      setDirectors(directorsInfo.filter(info => info !== null));\r\n      console.log(directors);\r\n    };\r\n    fetchDirectorsInfo();\r\n  }, [movieDetail.directorIds])\r\n\r\n\r\n  \r\n  const getDirectorInfoByName = async (directorNm) => {\r\n    try {\r\n      const res = await directorInfoByNameDB(directorNm);\r\n      return res;\r\n    } catch (error) {\r\n      console.log('감독 정보 로드 실패 : ', error);\r\n      return null;\r\n    }\r\n  };\r\n\r\n\r\n  const creditInfoStyle = {\r\n\r\n  }\r\n\r\n\r\n  return (\r\n    <>\r\n     <div style={creditInfoStyle}>\r\n        <h3>감독 정보</h3>\r\n        {directors.map((director, index) => (\r\n          <div key={index}>\r\n            <p>이름: {director.directorNm}</p>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default MovieDetailMidSection2"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}