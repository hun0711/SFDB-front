{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"onClick\", \"onKeyDown\", \"onFocus\", \"onBlur\", \"onMouseUp\", \"onPaste\", \"error\"];\nimport * as React from 'react';\nimport useEnhancedEffect from '@mui/utils/useEnhancedEffect';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport useForkRef from '@mui/utils/useForkRef';\nimport { useTheme } from '@mui/material/styles';\nimport { useValidation } from '../useValidation';\nimport { useUtils } from '../useUtils';\nimport { adjustSectionValue, isAndroid, cleanString, getSectionOrder } from './useField.utils';\nimport { useFieldState } from './useFieldState';\nimport { useFieldCharacterEditing } from './useFieldCharacterEditing';\nimport { getActiveElement } from '../../utils/utils';\nexport var useField = function useField(params) {\n  var utils = useUtils();\n  var _useFieldState = useFieldState(params),\n    state = _useFieldState.state,\n    selectedSectionIndexes = _useFieldState.selectedSectionIndexes,\n    _setSelectedSections = _useFieldState.setSelectedSections,\n    clearValue = _useFieldState.clearValue,\n    clearActiveSection = _useFieldState.clearActiveSection,\n    updateSectionValue = _useFieldState.updateSectionValue,\n    updateValueFromValueStr = _useFieldState.updateValueFromValueStr,\n    setTempAndroidValueStr = _useFieldState.setTempAndroidValueStr,\n    sectionsValueBoundaries = _useFieldState.sectionsValueBoundaries,\n    placeholder = _useFieldState.placeholder,\n    timezone = _useFieldState.timezone;\n  var inputRefProp = params.inputRef,\n    internalProps = params.internalProps,\n    _params$internalProps = params.internalProps,\n    _params$internalProps2 = _params$internalProps.readOnly,\n    readOnly = _params$internalProps2 === void 0 ? false : _params$internalProps2,\n    unstableFieldRef = _params$internalProps.unstableFieldRef,\n    minutesStep = _params$internalProps.minutesStep,\n    _params$forwardedProp = params.forwardedProps,\n    onClick = _params$forwardedProp.onClick,\n    onKeyDown = _params$forwardedProp.onKeyDown,\n    onFocus = _params$forwardedProp.onFocus,\n    onBlur = _params$forwardedProp.onBlur,\n    onMouseUp = _params$forwardedProp.onMouseUp,\n    onPaste = _params$forwardedProp.onPaste,\n    error = _params$forwardedProp.error,\n    fieldValueManager = params.fieldValueManager,\n    valueManager = params.valueManager,\n    validator = params.validator,\n    otherForwardedProps = _objectWithoutPropertiesLoose(params.forwardedProps, _excluded);\n  var _useFieldCharacterEdi = useFieldCharacterEditing({\n      sections: state.sections,\n      updateSectionValue: updateSectionValue,\n      sectionsValueBoundaries: sectionsValueBoundaries,\n      setTempAndroidValueStr: setTempAndroidValueStr,\n      timezone: timezone\n    }),\n    applyCharacterEditing = _useFieldCharacterEdi.applyCharacterEditing,\n    resetCharacterQuery = _useFieldCharacterEdi.resetCharacterQuery;\n  var inputRef = React.useRef(null);\n  var handleRef = useForkRef(inputRefProp, inputRef);\n  var focusTimeoutRef = React.useRef(undefined);\n  var theme = useTheme();\n  var isRTL = theme.direction === 'rtl';\n  var sectionOrder = React.useMemo(function () {\n    return getSectionOrder(state.sections, isRTL);\n  }, [state.sections, isRTL]);\n  var syncSelectionFromDOM = function syncSelectionFromDOM() {\n    var _selectionStart;\n    if (readOnly) {\n      _setSelectedSections(null);\n      return;\n    }\n    var browserStartIndex = (_selectionStart = inputRef.current.selectionStart) != null ? _selectionStart : 0;\n    var nextSectionIndex;\n    if (browserStartIndex <= state.sections[0].startInInput) {\n      // Special case if browser index is in invisible characters at the beginning\n      nextSectionIndex = 1;\n    } else if (browserStartIndex >= state.sections[state.sections.length - 1].endInInput) {\n      // If the click is after the last character of the input, then we want to select the 1st section.\n      nextSectionIndex = 1;\n    } else {\n      nextSectionIndex = state.sections.findIndex(function (section) {\n        return section.startInInput - section.startSeparator.length > browserStartIndex;\n      });\n    }\n    var sectionIndex = nextSectionIndex === -1 ? state.sections.length - 1 : nextSectionIndex - 1;\n    _setSelectedSections(sectionIndex);\n  };\n  var handleInputClick = useEventCallback(function () {\n    onClick == null ? void 0 : onClick.apply(void 0, arguments);\n    syncSelectionFromDOM();\n  });\n  var handleInputMouseUp = useEventCallback(function (event) {\n    onMouseUp == null ? void 0 : onMouseUp(event);\n\n    // Without this, the browser will remove the selected when clicking inside an already-selected section.\n    event.preventDefault();\n  });\n  var handleInputFocus = useEventCallback(function () {\n    onFocus == null ? void 0 : onFocus.apply(void 0, arguments);\n    // The ref is guaranteed to be resolved at this point.\n    var input = inputRef.current;\n    window.clearTimeout(focusTimeoutRef.current);\n    focusTimeoutRef.current = setTimeout(function () {\n      // The ref changed, the component got remounted, the focus event is no longer relevant.\n      if (!input || input !== inputRef.current) {\n        return;\n      }\n      if (selectedSectionIndexes != null || readOnly) {\n        return;\n      }\n      if (\n      // avoid selecting all sections when focusing empty field without value\n      input.value.length && Number(input.selectionEnd) - Number(input.selectionStart) === input.value.length) {\n        _setSelectedSections('all');\n      } else {\n        syncSelectionFromDOM();\n      }\n    });\n  });\n  var handleInputBlur = useEventCallback(function () {\n    onBlur == null ? void 0 : onBlur.apply(void 0, arguments);\n    _setSelectedSections(null);\n  });\n  var handleInputPaste = useEventCallback(function (event) {\n    onPaste == null ? void 0 : onPaste(event);\n    if (readOnly) {\n      event.preventDefault();\n      return;\n    }\n    var pastedValue = event.clipboardData.getData('text');\n    if (selectedSectionIndexes && selectedSectionIndexes.startIndex === selectedSectionIndexes.endIndex) {\n      var activeSection = state.sections[selectedSectionIndexes.startIndex];\n      var lettersOnly = /^[a-zA-Z]+$/.test(pastedValue);\n      var digitsOnly = /^[0-9]+$/.test(pastedValue);\n      var digitsAndLetterOnly = /^(([a-zA-Z]+)|)([0-9]+)(([a-zA-Z]+)|)$/.test(pastedValue);\n      var isValidPastedValue = activeSection.contentType === 'letter' && lettersOnly || activeSection.contentType === 'digit' && digitsOnly || activeSection.contentType === 'digit-with-letter' && digitsAndLetterOnly;\n      if (isValidPastedValue) {\n        // Early return to let the paste update section, value\n        return;\n      }\n      if (lettersOnly || digitsOnly) {\n        // The pasted value correspond to a single section but not the expected type\n        // skip the modification\n        event.preventDefault();\n        return;\n      }\n    }\n    event.preventDefault();\n    resetCharacterQuery();\n    updateValueFromValueStr(pastedValue);\n  });\n  var handleInputChange = useEventCallback(function (event) {\n    if (readOnly) {\n      return;\n    }\n    var valueStr = event.target.value;\n    var cleanValueStr = cleanString(valueStr);\n\n    // If no section is selected, we just try to parse the new value\n    // This line is mostly triggered by imperative code / application tests.\n    if (selectedSectionIndexes == null) {\n      updateValueFromValueStr(cleanValueStr);\n      return;\n    }\n    var keyPressed;\n    if (selectedSectionIndexes.startIndex === 0 && selectedSectionIndexes.endIndex === state.sections.length - 1 && cleanValueStr.length === 1) {\n      keyPressed = cleanValueStr;\n    } else {\n      var prevValueStr = cleanString(fieldValueManager.getValueStrFromSections(state.sections, isRTL));\n      var startOfDiffIndex = -1;\n      var endOfDiffIndex = -1;\n      for (var i = 0; i < prevValueStr.length; i += 1) {\n        if (startOfDiffIndex === -1 && prevValueStr[i] !== cleanValueStr[i]) {\n          startOfDiffIndex = i;\n        }\n        if (endOfDiffIndex === -1 && prevValueStr[prevValueStr.length - i - 1] !== cleanValueStr[cleanValueStr.length - i - 1]) {\n          endOfDiffIndex = i;\n        }\n      }\n      var activeSection = state.sections[selectedSectionIndexes.startIndex];\n      var hasDiffOutsideOfActiveSection = startOfDiffIndex < activeSection.start || prevValueStr.length - endOfDiffIndex - 1 > activeSection.end;\n      if (hasDiffOutsideOfActiveSection) {\n        // TODO: Support if the new date is valid\n        return;\n      }\n\n      // The active section being selected, the browser has replaced its value with the key pressed by the user.\n      var activeSectionEndRelativeToNewValue = cleanValueStr.length - prevValueStr.length + activeSection.end - cleanString(activeSection.endSeparator || '').length;\n      keyPressed = cleanValueStr.slice(activeSection.start + cleanString(activeSection.startSeparator || '').length, activeSectionEndRelativeToNewValue);\n    }\n    if (isAndroid() && keyPressed.length === 0) {\n      setTempAndroidValueStr(valueStr);\n      return;\n    }\n    applyCharacterEditing({\n      keyPressed: keyPressed,\n      sectionIndex: selectedSectionIndexes.startIndex\n    });\n  });\n  var handleInputKeyDown = useEventCallback(function (event) {\n    onKeyDown == null ? void 0 : onKeyDown(event);\n\n    // eslint-disable-next-line default-case\n    switch (true) {\n      // Select all\n      case event.key === 'a' && (event.ctrlKey || event.metaKey):\n        {\n          // prevent default to make sure that the next line \"select all\" while updating\n          // the internal state at the same time.\n          event.preventDefault();\n          _setSelectedSections('all');\n          break;\n        }\n\n      // Move selection to next section\n      case event.key === 'ArrowRight':\n        {\n          event.preventDefault();\n          if (selectedSectionIndexes == null) {\n            _setSelectedSections(sectionOrder.startIndex);\n          } else if (selectedSectionIndexes.startIndex !== selectedSectionIndexes.endIndex) {\n            _setSelectedSections(selectedSectionIndexes.endIndex);\n          } else {\n            var nextSectionIndex = sectionOrder.neighbors[selectedSectionIndexes.startIndex].rightIndex;\n            if (nextSectionIndex !== null) {\n              _setSelectedSections(nextSectionIndex);\n            }\n          }\n          break;\n        }\n\n      // Move selection to previous section\n      case event.key === 'ArrowLeft':\n        {\n          event.preventDefault();\n          if (selectedSectionIndexes == null) {\n            _setSelectedSections(sectionOrder.endIndex);\n          } else if (selectedSectionIndexes.startIndex !== selectedSectionIndexes.endIndex) {\n            _setSelectedSections(selectedSectionIndexes.startIndex);\n          } else {\n            var _nextSectionIndex = sectionOrder.neighbors[selectedSectionIndexes.startIndex].leftIndex;\n            if (_nextSectionIndex !== null) {\n              _setSelectedSections(_nextSectionIndex);\n            }\n          }\n          break;\n        }\n\n      // Reset the value of the selected section\n      case ['Backspace', 'Delete'].includes(event.key):\n        {\n          event.preventDefault();\n          if (readOnly) {\n            break;\n          }\n          if (selectedSectionIndexes == null || selectedSectionIndexes.startIndex === 0 && selectedSectionIndexes.endIndex === state.sections.length - 1) {\n            clearValue();\n          } else {\n            clearActiveSection();\n          }\n          resetCharacterQuery();\n          break;\n        }\n\n      // Increment / decrement the selected section value\n      case ['ArrowUp', 'ArrowDown', 'Home', 'End', 'PageUp', 'PageDown'].includes(event.key):\n        {\n          event.preventDefault();\n          if (readOnly || selectedSectionIndexes == null) {\n            break;\n          }\n          var activeSection = state.sections[selectedSectionIndexes.startIndex];\n          var activeDateManager = fieldValueManager.getActiveDateManager(utils, state, activeSection);\n          var newSectionValue = adjustSectionValue(utils, timezone, activeSection, event.key, sectionsValueBoundaries, activeDateManager.date, {\n            minutesStep: minutesStep\n          });\n          updateSectionValue({\n            activeSection: activeSection,\n            newSectionValue: newSectionValue,\n            shouldGoToNextSection: false\n          });\n          break;\n        }\n    }\n  });\n  useEnhancedEffect(function () {\n    if (!inputRef.current) {\n      return;\n    }\n    if (selectedSectionIndexes == null) {\n      if (inputRef.current.scrollLeft) {\n        // Ensure that input content is not marked as selected.\n        // setting selection range to 0 causes issues in Safari.\n        // https://bugs.webkit.org/show_bug.cgi?id=224425\n        inputRef.current.scrollLeft = 0;\n      }\n      return;\n    }\n    var firstSelectedSection = state.sections[selectedSectionIndexes.startIndex];\n    var lastSelectedSection = state.sections[selectedSectionIndexes.endIndex];\n    var selectionStart = firstSelectedSection.startInInput;\n    var selectionEnd = lastSelectedSection.endInInput;\n    if (selectedSectionIndexes.shouldSelectBoundarySelectors) {\n      selectionStart -= firstSelectedSection.startSeparator.length;\n      selectionEnd += lastSelectedSection.endSeparator.length;\n    }\n    if (selectionStart !== inputRef.current.selectionStart || selectionEnd !== inputRef.current.selectionEnd) {\n      // Fix scroll jumping on iOS browser: https://github.com/mui/mui-x/issues/8321\n      var currentScrollTop = inputRef.current.scrollTop;\n      // On multi input range pickers we want to update selection range only for the active input\n      // This helps avoiding the focus jumping on Safari https://github.com/mui/mui-x/issues/9003\n      // because WebKit implements the `setSelectionRange` based on the spec: https://bugs.webkit.org/show_bug.cgi?id=224425\n      if (inputRef.current === getActiveElement(document)) {\n        inputRef.current.setSelectionRange(selectionStart, selectionEnd);\n      }\n      // Even reading this variable seems to do the trick, but also setting it just to make use of it\n      inputRef.current.scrollTop = currentScrollTop;\n    }\n  });\n  var validationError = useValidation(_extends({}, internalProps, {\n    value: state.value,\n    timezone: timezone\n  }), validator, valueManager.isSameError, valueManager.defaultErrorState);\n  var inputError = React.useMemo(function () {\n    // only override when `error` is undefined.\n    // in case of multi input fields, the `error` value is provided externally and will always be defined.\n    if (error !== undefined) {\n      return error;\n    }\n    return valueManager.hasError(validationError);\n  }, [valueManager, validationError, error]);\n  React.useEffect(function () {\n    if (!inputError && !selectedSectionIndexes) {\n      resetCharacterQuery();\n    }\n  }, [state.referenceValue, selectedSectionIndexes, inputError]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  React.useEffect(function () {\n    // Select the right section when focused on mount (`autoFocus = true` on the input)\n    if (inputRef.current && inputRef.current === document.activeElement) {\n      _setSelectedSections('all');\n    }\n    return function () {\n      return window.clearTimeout(focusTimeoutRef.current);\n    };\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  // If `state.tempValueStrAndroid` is still defined when running `useEffect`,\n  // Then `onChange` has only been called once, which means the user pressed `Backspace` to reset the section.\n  // This causes a small flickering on Android,\n  // But we can't use `useEnhancedEffect` which is always called before the second `onChange` call and then would cause false positives.\n  React.useEffect(function () {\n    if (state.tempValueStrAndroid != null && selectedSectionIndexes != null) {\n      resetCharacterQuery();\n      clearActiveSection();\n    }\n  }, [state.tempValueStrAndroid]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  var valueStr = React.useMemo(function () {\n    var _state$tempValueStrAn;\n    return (_state$tempValueStrAn = state.tempValueStrAndroid) != null ? _state$tempValueStrAn : fieldValueManager.getValueStrFromSections(state.sections, isRTL);\n  }, [state.sections, fieldValueManager, state.tempValueStrAndroid, isRTL]);\n  var inputMode = React.useMemo(function () {\n    if (selectedSectionIndexes == null) {\n      return 'text';\n    }\n    if (state.sections[selectedSectionIndexes.startIndex].contentType === 'letter') {\n      return 'text';\n    }\n    return 'tel';\n  }, [selectedSectionIndexes, state.sections]);\n  var inputHasFocus = inputRef.current && inputRef.current === getActiveElement(document);\n  var shouldShowPlaceholder = !inputHasFocus && valueManager.areValuesEqual(utils, state.value, valueManager.emptyValue);\n  React.useImperativeHandle(unstableFieldRef, function () {\n    return {\n      getSections: function getSections() {\n        return state.sections;\n      },\n      getActiveSectionIndex: function getActiveSectionIndex() {\n        var _selectionStart2, _selectionEnd;\n        var browserStartIndex = (_selectionStart2 = inputRef.current.selectionStart) != null ? _selectionStart2 : 0;\n        var browserEndIndex = (_selectionEnd = inputRef.current.selectionEnd) != null ? _selectionEnd : 0;\n        if (browserStartIndex === 0 && browserEndIndex === 0) {\n          return null;\n        }\n        var nextSectionIndex = browserStartIndex <= state.sections[0].startInInput ? 1 // Special case if browser index is in invisible characters at the beginning.\n        : state.sections.findIndex(function (section) {\n          return section.startInInput - section.startSeparator.length > browserStartIndex;\n        });\n        return nextSectionIndex === -1 ? state.sections.length - 1 : nextSectionIndex - 1;\n      },\n      setSelectedSections: function setSelectedSections(activeSectionIndex) {\n        return _setSelectedSections(activeSectionIndex);\n      }\n    };\n  });\n  return _extends({\n    placeholder: placeholder,\n    autoComplete: 'off'\n  }, otherForwardedProps, {\n    value: shouldShowPlaceholder ? '' : valueStr,\n    inputMode: inputMode,\n    readOnly: readOnly,\n    onClick: handleInputClick,\n    onFocus: handleInputFocus,\n    onBlur: handleInputBlur,\n    onPaste: handleInputPaste,\n    onChange: handleInputChange,\n    onKeyDown: handleInputKeyDown,\n    onMouseUp: handleInputMouseUp,\n    error: inputError,\n    ref: handleRef\n  });\n};","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","useEnhancedEffect","useEventCallback","useForkRef","useTheme","useValidation","useUtils","adjustSectionValue","isAndroid","cleanString","getSectionOrder","useFieldState","useFieldCharacterEditing","getActiveElement","useField","params","utils","_useFieldState","state","selectedSectionIndexes","setSelectedSections","clearValue","clearActiveSection","updateSectionValue","updateValueFromValueStr","setTempAndroidValueStr","sectionsValueBoundaries","placeholder","timezone","inputRefProp","inputRef","internalProps","_params$internalProps","_params$internalProps2","readOnly","unstableFieldRef","minutesStep","_params$forwardedProp","forwardedProps","onClick","onKeyDown","onFocus","onBlur","onMouseUp","onPaste","error","fieldValueManager","valueManager","validator","otherForwardedProps","_useFieldCharacterEdi","sections","applyCharacterEditing","resetCharacterQuery","useRef","handleRef","focusTimeoutRef","undefined","theme","isRTL","direction","sectionOrder","useMemo","syncSelectionFromDOM","_selectionStart","browserStartIndex","current","selectionStart","nextSectionIndex","startInInput","length","endInInput","findIndex","section","startSeparator","sectionIndex","handleInputClick","apply","arguments","handleInputMouseUp","event","preventDefault","handleInputFocus","input","window","clearTimeout","setTimeout","value","Number","selectionEnd","handleInputBlur","handleInputPaste","pastedValue","clipboardData","getData","startIndex","endIndex","activeSection","lettersOnly","test","digitsOnly","digitsAndLetterOnly","isValidPastedValue","contentType","handleInputChange","valueStr","target","cleanValueStr","keyPressed","prevValueStr","getValueStrFromSections","startOfDiffIndex","endOfDiffIndex","i","hasDiffOutsideOfActiveSection","start","end","activeSectionEndRelativeToNewValue","endSeparator","slice","handleInputKeyDown","key","ctrlKey","metaKey","neighbors","rightIndex","leftIndex","includes","activeDateManager","getActiveDateManager","newSectionValue","date","shouldGoToNextSection","scrollLeft","firstSelectedSection","lastSelectedSection","shouldSelectBoundarySelectors","currentScrollTop","scrollTop","document","setSelectionRange","validationError","isSameError","defaultErrorState","inputError","hasError","useEffect","referenceValue","activeElement","tempValueStrAndroid","_state$tempValueStrAn","inputMode","inputHasFocus","shouldShowPlaceholder","areValuesEqual","emptyValue","useImperativeHandle","getSections","getActiveSectionIndex","_selectionStart2","_selectionEnd","browserEndIndex","activeSectionIndex","autoComplete","onChange","ref"],"sources":["C:/Users/carax/Desktop/SideProject/SFDB-Project/front/node_modules/@mui/x-date-pickers/internals/hooks/useField/useField.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"onClick\", \"onKeyDown\", \"onFocus\", \"onBlur\", \"onMouseUp\", \"onPaste\", \"error\"];\nimport * as React from 'react';\nimport useEnhancedEffect from '@mui/utils/useEnhancedEffect';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport useForkRef from '@mui/utils/useForkRef';\nimport { useTheme } from '@mui/material/styles';\nimport { useValidation } from '../useValidation';\nimport { useUtils } from '../useUtils';\nimport { adjustSectionValue, isAndroid, cleanString, getSectionOrder } from './useField.utils';\nimport { useFieldState } from './useFieldState';\nimport { useFieldCharacterEditing } from './useFieldCharacterEditing';\nimport { getActiveElement } from '../../utils/utils';\nexport const useField = params => {\n  const utils = useUtils();\n  const {\n    state,\n    selectedSectionIndexes,\n    setSelectedSections,\n    clearValue,\n    clearActiveSection,\n    updateSectionValue,\n    updateValueFromValueStr,\n    setTempAndroidValueStr,\n    sectionsValueBoundaries,\n    placeholder,\n    timezone\n  } = useFieldState(params);\n  const {\n      inputRef: inputRefProp,\n      internalProps,\n      internalProps: {\n        readOnly = false,\n        unstableFieldRef,\n        minutesStep\n      },\n      forwardedProps: {\n        onClick,\n        onKeyDown,\n        onFocus,\n        onBlur,\n        onMouseUp,\n        onPaste,\n        error\n      },\n      fieldValueManager,\n      valueManager,\n      validator\n    } = params,\n    otherForwardedProps = _objectWithoutPropertiesLoose(params.forwardedProps, _excluded);\n  const {\n    applyCharacterEditing,\n    resetCharacterQuery\n  } = useFieldCharacterEditing({\n    sections: state.sections,\n    updateSectionValue,\n    sectionsValueBoundaries,\n    setTempAndroidValueStr,\n    timezone\n  });\n  const inputRef = React.useRef(null);\n  const handleRef = useForkRef(inputRefProp, inputRef);\n  const focusTimeoutRef = React.useRef(undefined);\n  const theme = useTheme();\n  const isRTL = theme.direction === 'rtl';\n  const sectionOrder = React.useMemo(() => getSectionOrder(state.sections, isRTL), [state.sections, isRTL]);\n  const syncSelectionFromDOM = () => {\n    var _selectionStart;\n    if (readOnly) {\n      setSelectedSections(null);\n      return;\n    }\n    const browserStartIndex = (_selectionStart = inputRef.current.selectionStart) != null ? _selectionStart : 0;\n    let nextSectionIndex;\n    if (browserStartIndex <= state.sections[0].startInInput) {\n      // Special case if browser index is in invisible characters at the beginning\n      nextSectionIndex = 1;\n    } else if (browserStartIndex >= state.sections[state.sections.length - 1].endInInput) {\n      // If the click is after the last character of the input, then we want to select the 1st section.\n      nextSectionIndex = 1;\n    } else {\n      nextSectionIndex = state.sections.findIndex(section => section.startInInput - section.startSeparator.length > browserStartIndex);\n    }\n    const sectionIndex = nextSectionIndex === -1 ? state.sections.length - 1 : nextSectionIndex - 1;\n    setSelectedSections(sectionIndex);\n  };\n  const handleInputClick = useEventCallback((...args) => {\n    onClick == null ? void 0 : onClick(...args);\n    syncSelectionFromDOM();\n  });\n  const handleInputMouseUp = useEventCallback(event => {\n    onMouseUp == null ? void 0 : onMouseUp(event);\n\n    // Without this, the browser will remove the selected when clicking inside an already-selected section.\n    event.preventDefault();\n  });\n  const handleInputFocus = useEventCallback((...args) => {\n    onFocus == null ? void 0 : onFocus(...args);\n    // The ref is guaranteed to be resolved at this point.\n    const input = inputRef.current;\n    window.clearTimeout(focusTimeoutRef.current);\n    focusTimeoutRef.current = setTimeout(() => {\n      // The ref changed, the component got remounted, the focus event is no longer relevant.\n      if (!input || input !== inputRef.current) {\n        return;\n      }\n      if (selectedSectionIndexes != null || readOnly) {\n        return;\n      }\n      if (\n      // avoid selecting all sections when focusing empty field without value\n      input.value.length && Number(input.selectionEnd) - Number(input.selectionStart) === input.value.length) {\n        setSelectedSections('all');\n      } else {\n        syncSelectionFromDOM();\n      }\n    });\n  });\n  const handleInputBlur = useEventCallback((...args) => {\n    onBlur == null ? void 0 : onBlur(...args);\n    setSelectedSections(null);\n  });\n  const handleInputPaste = useEventCallback(event => {\n    onPaste == null ? void 0 : onPaste(event);\n    if (readOnly) {\n      event.preventDefault();\n      return;\n    }\n    const pastedValue = event.clipboardData.getData('text');\n    if (selectedSectionIndexes && selectedSectionIndexes.startIndex === selectedSectionIndexes.endIndex) {\n      const activeSection = state.sections[selectedSectionIndexes.startIndex];\n      const lettersOnly = /^[a-zA-Z]+$/.test(pastedValue);\n      const digitsOnly = /^[0-9]+$/.test(pastedValue);\n      const digitsAndLetterOnly = /^(([a-zA-Z]+)|)([0-9]+)(([a-zA-Z]+)|)$/.test(pastedValue);\n      const isValidPastedValue = activeSection.contentType === 'letter' && lettersOnly || activeSection.contentType === 'digit' && digitsOnly || activeSection.contentType === 'digit-with-letter' && digitsAndLetterOnly;\n      if (isValidPastedValue) {\n        // Early return to let the paste update section, value\n        return;\n      }\n      if (lettersOnly || digitsOnly) {\n        // The pasted value correspond to a single section but not the expected type\n        // skip the modification\n        event.preventDefault();\n        return;\n      }\n    }\n    event.preventDefault();\n    resetCharacterQuery();\n    updateValueFromValueStr(pastedValue);\n  });\n  const handleInputChange = useEventCallback(event => {\n    if (readOnly) {\n      return;\n    }\n    const valueStr = event.target.value;\n    const cleanValueStr = cleanString(valueStr);\n\n    // If no section is selected, we just try to parse the new value\n    // This line is mostly triggered by imperative code / application tests.\n    if (selectedSectionIndexes == null) {\n      updateValueFromValueStr(cleanValueStr);\n      return;\n    }\n    let keyPressed;\n    if (selectedSectionIndexes.startIndex === 0 && selectedSectionIndexes.endIndex === state.sections.length - 1 && cleanValueStr.length === 1) {\n      keyPressed = cleanValueStr;\n    } else {\n      const prevValueStr = cleanString(fieldValueManager.getValueStrFromSections(state.sections, isRTL));\n      let startOfDiffIndex = -1;\n      let endOfDiffIndex = -1;\n      for (let i = 0; i < prevValueStr.length; i += 1) {\n        if (startOfDiffIndex === -1 && prevValueStr[i] !== cleanValueStr[i]) {\n          startOfDiffIndex = i;\n        }\n        if (endOfDiffIndex === -1 && prevValueStr[prevValueStr.length - i - 1] !== cleanValueStr[cleanValueStr.length - i - 1]) {\n          endOfDiffIndex = i;\n        }\n      }\n      const activeSection = state.sections[selectedSectionIndexes.startIndex];\n      const hasDiffOutsideOfActiveSection = startOfDiffIndex < activeSection.start || prevValueStr.length - endOfDiffIndex - 1 > activeSection.end;\n      if (hasDiffOutsideOfActiveSection) {\n        // TODO: Support if the new date is valid\n        return;\n      }\n\n      // The active section being selected, the browser has replaced its value with the key pressed by the user.\n      const activeSectionEndRelativeToNewValue = cleanValueStr.length - prevValueStr.length + activeSection.end - cleanString(activeSection.endSeparator || '').length;\n      keyPressed = cleanValueStr.slice(activeSection.start + cleanString(activeSection.startSeparator || '').length, activeSectionEndRelativeToNewValue);\n    }\n    if (isAndroid() && keyPressed.length === 0) {\n      setTempAndroidValueStr(valueStr);\n      return;\n    }\n    applyCharacterEditing({\n      keyPressed,\n      sectionIndex: selectedSectionIndexes.startIndex\n    });\n  });\n  const handleInputKeyDown = useEventCallback(event => {\n    onKeyDown == null ? void 0 : onKeyDown(event);\n\n    // eslint-disable-next-line default-case\n    switch (true) {\n      // Select all\n      case event.key === 'a' && (event.ctrlKey || event.metaKey):\n        {\n          // prevent default to make sure that the next line \"select all\" while updating\n          // the internal state at the same time.\n          event.preventDefault();\n          setSelectedSections('all');\n          break;\n        }\n\n      // Move selection to next section\n      case event.key === 'ArrowRight':\n        {\n          event.preventDefault();\n          if (selectedSectionIndexes == null) {\n            setSelectedSections(sectionOrder.startIndex);\n          } else if (selectedSectionIndexes.startIndex !== selectedSectionIndexes.endIndex) {\n            setSelectedSections(selectedSectionIndexes.endIndex);\n          } else {\n            const nextSectionIndex = sectionOrder.neighbors[selectedSectionIndexes.startIndex].rightIndex;\n            if (nextSectionIndex !== null) {\n              setSelectedSections(nextSectionIndex);\n            }\n          }\n          break;\n        }\n\n      // Move selection to previous section\n      case event.key === 'ArrowLeft':\n        {\n          event.preventDefault();\n          if (selectedSectionIndexes == null) {\n            setSelectedSections(sectionOrder.endIndex);\n          } else if (selectedSectionIndexes.startIndex !== selectedSectionIndexes.endIndex) {\n            setSelectedSections(selectedSectionIndexes.startIndex);\n          } else {\n            const nextSectionIndex = sectionOrder.neighbors[selectedSectionIndexes.startIndex].leftIndex;\n            if (nextSectionIndex !== null) {\n              setSelectedSections(nextSectionIndex);\n            }\n          }\n          break;\n        }\n\n      // Reset the value of the selected section\n      case ['Backspace', 'Delete'].includes(event.key):\n        {\n          event.preventDefault();\n          if (readOnly) {\n            break;\n          }\n          if (selectedSectionIndexes == null || selectedSectionIndexes.startIndex === 0 && selectedSectionIndexes.endIndex === state.sections.length - 1) {\n            clearValue();\n          } else {\n            clearActiveSection();\n          }\n          resetCharacterQuery();\n          break;\n        }\n\n      // Increment / decrement the selected section value\n      case ['ArrowUp', 'ArrowDown', 'Home', 'End', 'PageUp', 'PageDown'].includes(event.key):\n        {\n          event.preventDefault();\n          if (readOnly || selectedSectionIndexes == null) {\n            break;\n          }\n          const activeSection = state.sections[selectedSectionIndexes.startIndex];\n          const activeDateManager = fieldValueManager.getActiveDateManager(utils, state, activeSection);\n          const newSectionValue = adjustSectionValue(utils, timezone, activeSection, event.key, sectionsValueBoundaries, activeDateManager.date, {\n            minutesStep\n          });\n          updateSectionValue({\n            activeSection,\n            newSectionValue,\n            shouldGoToNextSection: false\n          });\n          break;\n        }\n    }\n  });\n  useEnhancedEffect(() => {\n    if (!inputRef.current) {\n      return;\n    }\n    if (selectedSectionIndexes == null) {\n      if (inputRef.current.scrollLeft) {\n        // Ensure that input content is not marked as selected.\n        // setting selection range to 0 causes issues in Safari.\n        // https://bugs.webkit.org/show_bug.cgi?id=224425\n        inputRef.current.scrollLeft = 0;\n      }\n      return;\n    }\n    const firstSelectedSection = state.sections[selectedSectionIndexes.startIndex];\n    const lastSelectedSection = state.sections[selectedSectionIndexes.endIndex];\n    let selectionStart = firstSelectedSection.startInInput;\n    let selectionEnd = lastSelectedSection.endInInput;\n    if (selectedSectionIndexes.shouldSelectBoundarySelectors) {\n      selectionStart -= firstSelectedSection.startSeparator.length;\n      selectionEnd += lastSelectedSection.endSeparator.length;\n    }\n    if (selectionStart !== inputRef.current.selectionStart || selectionEnd !== inputRef.current.selectionEnd) {\n      // Fix scroll jumping on iOS browser: https://github.com/mui/mui-x/issues/8321\n      const currentScrollTop = inputRef.current.scrollTop;\n      // On multi input range pickers we want to update selection range only for the active input\n      // This helps avoiding the focus jumping on Safari https://github.com/mui/mui-x/issues/9003\n      // because WebKit implements the `setSelectionRange` based on the spec: https://bugs.webkit.org/show_bug.cgi?id=224425\n      if (inputRef.current === getActiveElement(document)) {\n        inputRef.current.setSelectionRange(selectionStart, selectionEnd);\n      }\n      // Even reading this variable seems to do the trick, but also setting it just to make use of it\n      inputRef.current.scrollTop = currentScrollTop;\n    }\n  });\n  const validationError = useValidation(_extends({}, internalProps, {\n    value: state.value,\n    timezone\n  }), validator, valueManager.isSameError, valueManager.defaultErrorState);\n  const inputError = React.useMemo(() => {\n    // only override when `error` is undefined.\n    // in case of multi input fields, the `error` value is provided externally and will always be defined.\n    if (error !== undefined) {\n      return error;\n    }\n    return valueManager.hasError(validationError);\n  }, [valueManager, validationError, error]);\n  React.useEffect(() => {\n    if (!inputError && !selectedSectionIndexes) {\n      resetCharacterQuery();\n    }\n  }, [state.referenceValue, selectedSectionIndexes, inputError]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  React.useEffect(() => {\n    // Select the right section when focused on mount (`autoFocus = true` on the input)\n    if (inputRef.current && inputRef.current === document.activeElement) {\n      setSelectedSections('all');\n    }\n    return () => window.clearTimeout(focusTimeoutRef.current);\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  // If `state.tempValueStrAndroid` is still defined when running `useEffect`,\n  // Then `onChange` has only been called once, which means the user pressed `Backspace` to reset the section.\n  // This causes a small flickering on Android,\n  // But we can't use `useEnhancedEffect` which is always called before the second `onChange` call and then would cause false positives.\n  React.useEffect(() => {\n    if (state.tempValueStrAndroid != null && selectedSectionIndexes != null) {\n      resetCharacterQuery();\n      clearActiveSection();\n    }\n  }, [state.tempValueStrAndroid]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const valueStr = React.useMemo(() => {\n    var _state$tempValueStrAn;\n    return (_state$tempValueStrAn = state.tempValueStrAndroid) != null ? _state$tempValueStrAn : fieldValueManager.getValueStrFromSections(state.sections, isRTL);\n  }, [state.sections, fieldValueManager, state.tempValueStrAndroid, isRTL]);\n  const inputMode = React.useMemo(() => {\n    if (selectedSectionIndexes == null) {\n      return 'text';\n    }\n    if (state.sections[selectedSectionIndexes.startIndex].contentType === 'letter') {\n      return 'text';\n    }\n    return 'tel';\n  }, [selectedSectionIndexes, state.sections]);\n  const inputHasFocus = inputRef.current && inputRef.current === getActiveElement(document);\n  const shouldShowPlaceholder = !inputHasFocus && valueManager.areValuesEqual(utils, state.value, valueManager.emptyValue);\n  React.useImperativeHandle(unstableFieldRef, () => ({\n    getSections: () => state.sections,\n    getActiveSectionIndex: () => {\n      var _selectionStart2, _selectionEnd;\n      const browserStartIndex = (_selectionStart2 = inputRef.current.selectionStart) != null ? _selectionStart2 : 0;\n      const browserEndIndex = (_selectionEnd = inputRef.current.selectionEnd) != null ? _selectionEnd : 0;\n      if (browserStartIndex === 0 && browserEndIndex === 0) {\n        return null;\n      }\n      const nextSectionIndex = browserStartIndex <= state.sections[0].startInInput ? 1 // Special case if browser index is in invisible characters at the beginning.\n      : state.sections.findIndex(section => section.startInInput - section.startSeparator.length > browserStartIndex);\n      return nextSectionIndex === -1 ? state.sections.length - 1 : nextSectionIndex - 1;\n    },\n    setSelectedSections: activeSectionIndex => setSelectedSections(activeSectionIndex)\n  }));\n  return _extends({\n    placeholder,\n    autoComplete: 'off'\n  }, otherForwardedProps, {\n    value: shouldShowPlaceholder ? '' : valueStr,\n    inputMode,\n    readOnly,\n    onClick: handleInputClick,\n    onFocus: handleInputFocus,\n    onBlur: handleInputBlur,\n    onPaste: handleInputPaste,\n    onChange: handleInputChange,\n    onKeyDown: handleInputKeyDown,\n    onMouseUp: handleInputMouseUp,\n    error: inputError,\n    ref: handleRef\n  });\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}