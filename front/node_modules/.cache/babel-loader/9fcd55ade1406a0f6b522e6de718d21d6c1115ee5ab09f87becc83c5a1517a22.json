{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\carax\\\\Desktop\\\\\\uC0AC\\uC774\\uB4DC \\uD504\\uB85C\\uC81D\\uD2B8\\\\SFDB-Project\\\\front\\\\src\\\\pages\\\\user\\\\GoogleLoginBtn.jsx\";\nimport React from 'react';\nimport GoogleLogin from 'react-google-login';\nimport { userLoginDB } from '../../axios/user/loginLogic';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GoogleLoginBtn = ({\n  onSuccess\n}) => {\n  // 구글 로그인 성공 콜백\n  const handleGoogleLoginSuccess = async response => {\n    try {\n      const googleLoginData = {\n        tokenId: response.tokenId\n      };\n      const res = await userLoginDB(googleLoginData);\n      console.log('Google 로그인 결과:', res);\n      if (res === 1) {\n        // 구글 로그인이 성공적으로 처리됐을 때의 처리 (일반 로그인 처리와 유사)\n        // 이제 onSuccess 콜백을 호출하여 Login 컴포넌트에서 구글 로그인 성공 시 처리를 하도록 합니다.\n        onSuccess(response);\n      } else {\n        // 구글 로그인이 실패했을 때의 처리\n        console.log('Google 로그인 실패');\n      }\n    } catch (error) {\n      console.error('Google 로그인 에러:', error);\n    }\n  };\n\n  // 구글 로그인 실패 콜백 (기능 유지)\n  const handleGoogleLoginFailure = error => {\n    console.error('Google 로그인 에러:', error);\n  };\n  return /*#__PURE__*/_jsxDEV(GoogleLogin, {\n    clientId: config.googleC // 자신의 구글 OAuth 클라이언트 ID로 대체해야 합니다.\n    ,\n    onSuccess: handleGoogleLoginSuccess,\n    onFailure: handleGoogleLoginFailure,\n    cookiePolicy: \"single_host_origin\",\n    render: renderProps => /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: renderProps.onClick,\n      disabled: renderProps.disabled,\n      style: {\n        cursor: 'pointer',\n        border: 'none',\n        background: 'none'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"/images/logo/google.png\",\n        alt: \"\\uAD6C\\uAE00 \\uB85C\\uADF8\\uC778\",\n        style: {\n          width: '100%',\n          height: '100%'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n_c = GoogleLoginBtn;\nexport default GoogleLoginBtn;\nvar _c;\n$RefreshReg$(_c, \"GoogleLoginBtn\");","map":{"version":3,"names":["React","GoogleLogin","userLoginDB","jsxDEV","_jsxDEV","GoogleLoginBtn","onSuccess","handleGoogleLoginSuccess","response","googleLoginData","tokenId","res","console","log","error","handleGoogleLoginFailure","clientId","config","googleC","onFailure","cookiePolicy","render","renderProps","onClick","disabled","style","cursor","border","background","children","src","alt","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/carax/Desktop/사이드 프로젝트/SFDB-Project/front/src/pages/user/GoogleLoginBtn.jsx"],"sourcesContent":["import React from 'react';\r\nimport GoogleLogin from 'react-google-login';\r\nimport { userLoginDB } from '../../axios/user/loginLogic';\r\n\r\nconst GoogleLoginBtn = ({ onSuccess }) => {\r\n  // 구글 로그인 성공 콜백\r\n  const handleGoogleLoginSuccess = async (response) => {\r\n    try {\r\n      const googleLoginData = {\r\n        tokenId: response.tokenId,\r\n      };\r\n      const res = await userLoginDB(googleLoginData);\r\n      console.log('Google 로그인 결과:', res);\r\n\r\n      if (res === 1) {\r\n        // 구글 로그인이 성공적으로 처리됐을 때의 처리 (일반 로그인 처리와 유사)\r\n        // 이제 onSuccess 콜백을 호출하여 Login 컴포넌트에서 구글 로그인 성공 시 처리를 하도록 합니다.\r\n        onSuccess(response);\r\n      } else {\r\n        // 구글 로그인이 실패했을 때의 처리\r\n        console.log('Google 로그인 실패');\r\n      }\r\n    } catch (error) {\r\n      console.error('Google 로그인 에러:', error);\r\n    }\r\n  };\r\n\r\n  // 구글 로그인 실패 콜백 (기능 유지)\r\n  const handleGoogleLoginFailure = (error) => {\r\n    console.error('Google 로그인 에러:', error);\r\n  };\r\n\r\n  return (\r\n    <GoogleLogin\r\n      clientId={config.googleC} // 자신의 구글 OAuth 클라이언트 ID로 대체해야 합니다.\r\n      onSuccess={handleGoogleLoginSuccess}\r\n      onFailure={handleGoogleLoginFailure}\r\n      cookiePolicy=\"single_host_origin\"\r\n      render={(renderProps) => (\r\n        <button onClick={renderProps.onClick} disabled={renderProps.disabled} style={{ cursor: 'pointer', border: 'none', background: 'none' }}>\r\n          <img src=\"/images/logo/google.png\" alt=\"구글 로그인\" style={{ width: '100%', height: '100%' }} />\r\n        </button>\r\n      )}\r\n    />\r\n  );\r\n};\r\n\r\nexport default GoogleLoginBtn;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,WAAW,MAAM,oBAAoB;AAC5C,SAASC,WAAW,QAAQ,6BAA6B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1D,MAAMC,cAAc,GAAGA,CAAC;EAAEC;AAAU,CAAC,KAAK;EACxC;EACA,MAAMC,wBAAwB,GAAG,MAAOC,QAAQ,IAAK;IACnD,IAAI;MACF,MAAMC,eAAe,GAAG;QACtBC,OAAO,EAAEF,QAAQ,CAACE;MACpB,CAAC;MACD,MAAMC,GAAG,GAAG,MAAMT,WAAW,CAACO,eAAe,CAAC;MAC9CG,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEF,GAAG,CAAC;MAElC,IAAIA,GAAG,KAAK,CAAC,EAAE;QACb;QACA;QACAL,SAAS,CAACE,QAAQ,CAAC;MACrB,CAAC,MAAM;QACL;QACAI,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;MAC9B;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;IACxC;EACF,CAAC;;EAED;EACA,MAAMC,wBAAwB,GAAID,KAAK,IAAK;IAC1CF,OAAO,CAACE,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;EACxC,CAAC;EAED,oBACEV,OAAA,CAACH,WAAW;IACVe,QAAQ,EAAEC,MAAM,CAACC,OAAQ,CAAC;IAAA;IAC1BZ,SAAS,EAAEC,wBAAyB;IACpCY,SAAS,EAAEJ,wBAAyB;IACpCK,YAAY,EAAC,oBAAoB;IACjCC,MAAM,EAAGC,WAAW,iBAClBlB,OAAA;MAAQmB,OAAO,EAAED,WAAW,CAACC,OAAQ;MAACC,QAAQ,EAAEF,WAAW,CAACE,QAAS;MAACC,KAAK,EAAE;QAAEC,MAAM,EAAE,SAAS;QAAEC,MAAM,EAAE,MAAM;QAAEC,UAAU,EAAE;MAAO,CAAE;MAAAC,QAAA,eACrIzB,OAAA;QAAK0B,GAAG,EAAC,yBAAyB;QAACC,GAAG,EAAC,iCAAQ;QAACN,KAAK,EAAE;UAAEO,KAAK,EAAE,MAAM;UAAEC,MAAM,EAAE;QAAO;MAAE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtF;EACR;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEN,CAAC;AAACC,EAAA,GAzCIjC,cAAc;AA2CpB,eAAeA,cAAc;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}