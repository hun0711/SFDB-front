{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { directorInfoByNameDB, directorInfoDB } from '../../axios/main/movieLogic';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MovieDetailMidSection2 = ({\n  movieDetail\n}) => {\n  _s();\n  const [directors, setDirectors] = useState([]);\n  clg;\n  useEffect(() => {\n    const getDirectorInfo = async directorId => {\n      try {\n        const res = await directorInfoDB(directorId);\n        return res;\n      } catch (error) {\n        console.log('감독 정보 로드 실패 : ', error);\n        return null;\n      }\n    };\n    const fetchDirectorsInfo = async () => {\n      const directorIds = movieDetail.directorId ? movieDetail.directorId.split(',') : [];\n      const directorNms = movieDetail.directorNm ? movieDetail.directorNm.split(',') : [];\n      const directorsInfo = await Promise.all(directorIds.map(async (directorId, index) => {\n        if (directorId) {\n          return await getDirectorInfo(directorId);\n        } else if (directorNms[index]) {\n          return await getDirectorInfoByName(directorNms[index]);\n        }\n        return null;\n      }));\n      setDirectors(directorsInfo.filter(info => info !== null));\n      console.log(directors);\n    };\n    fetchDirectorsInfo();\n  }, [movieDetail.directorId]);\n  const getDirectorInfoByName = async directorNm => {\n    try {\n      const res = await directorInfoByNameDB(directorNm);\n      return res;\n    } catch (error) {\n      console.log('감독 정보 로드 실패 : ', error);\n      return null;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n_s(MovieDetailMidSection2, \"MOMXR1SbmS2ZUbc3rI2O9ok3sSA=\");\n_c = MovieDetailMidSection2;\nexport default MovieDetailMidSection2;\nvar _c;\n$RefreshReg$(_c, \"MovieDetailMidSection2\");","map":{"version":3,"names":["React","useEffect","useState","directorInfoByNameDB","directorInfoDB","Fragment","_Fragment","jsxDEV","_jsxDEV","MovieDetailMidSection2","movieDetail","_s","directors","setDirectors","clg","getDirectorInfo","directorId","res","error","console","log","fetchDirectorsInfo","directorIds","split","directorNms","directorNm","directorsInfo","Promise","all","map","index","getDirectorInfoByName","filter","info","_c","$RefreshReg$"],"sources":["C:/Users/carax/Desktop/사이드 프로젝트/SFDB-Project/front/src/pages/detail/MovieDetailMidSection2.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { directorInfoByNameDB, directorInfoDB } from '../../axios/main/movieLogic'\r\n\r\nconst MovieDetailMidSection2 = ({ movieDetail }) => {\r\n  const [directors, setDirectors] = useState([])\r\n  clg\r\n\r\n  useEffect(() => {\r\n    const getDirectorInfo = async (directorId) => {\r\n      try {\r\n        const res = await directorInfoDB(directorId)\r\n        return res;\r\n      } catch (error) {\r\n        console.log('감독 정보 로드 실패 : ', error);\r\n        return null;\r\n      }\r\n    }\r\n\r\n    const fetchDirectorsInfo = async () => { \r\n      const directorIds = movieDetail.directorId ? movieDetail.directorId.split(',') : [];\r\n      const directorNms = movieDetail.directorNm ? movieDetail.directorNm.split(',') : [];\r\n\r\n      const directorsInfo = await Promise.all(\r\n        directorIds.map(async (directorId, index) => {\r\n          if (directorId) {\r\n            return await getDirectorInfo(directorId);\r\n          } else if (directorNms[index]) {\r\n            return await getDirectorInfoByName(directorNms[index]);\r\n          }\r\n          return null;\r\n        })\r\n      );\r\n      setDirectors(directorsInfo.filter(info => info !== null));\r\n      console.log(directors);\r\n    };\r\n    fetchDirectorsInfo();\r\n  }, [movieDetail.directorId])\r\n\r\n\r\n  \r\n  const getDirectorInfoByName = async (directorNm) => {\r\n    try {\r\n      const res = await directorInfoByNameDB(directorNm);\r\n      return res;\r\n    } catch (error) {\r\n      console.log('감독 정보 로드 실패 : ', error);\r\n      return null;\r\n    }\r\n  };\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n    \r\n    </>\r\n  )\r\n}\r\n\r\nexport default MovieDetailMidSection2"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,oBAAoB,EAAEC,cAAc,QAAQ,6BAA6B;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAElF,MAAMC,sBAAsB,GAAGA,CAAC;EAAEC;AAAY,CAAC,KAAK;EAAAC,EAAA;EAClD,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC9CY,GAAG;EAEHb,SAAS,CAAC,MAAM;IACd,MAAMc,eAAe,GAAG,MAAOC,UAAU,IAAK;MAC5C,IAAI;QACF,MAAMC,GAAG,GAAG,MAAMb,cAAc,CAACY,UAAU,CAAC;QAC5C,OAAOC,GAAG;MACZ,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEF,KAAK,CAAC;QACpC,OAAO,IAAI;MACb;IACF,CAAC;IAED,MAAMG,kBAAkB,GAAG,MAAAA,CAAA,KAAY;MACrC,MAAMC,WAAW,GAAGZ,WAAW,CAACM,UAAU,GAAGN,WAAW,CAACM,UAAU,CAACO,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE;MACnF,MAAMC,WAAW,GAAGd,WAAW,CAACe,UAAU,GAAGf,WAAW,CAACe,UAAU,CAACF,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE;MAEnF,MAAMG,aAAa,GAAG,MAAMC,OAAO,CAACC,GAAG,CACrCN,WAAW,CAACO,GAAG,CAAC,OAAOb,UAAU,EAAEc,KAAK,KAAK;QAC3C,IAAId,UAAU,EAAE;UACd,OAAO,MAAMD,eAAe,CAACC,UAAU,CAAC;QAC1C,CAAC,MAAM,IAAIQ,WAAW,CAACM,KAAK,CAAC,EAAE;UAC7B,OAAO,MAAMC,qBAAqB,CAACP,WAAW,CAACM,KAAK,CAAC,CAAC;QACxD;QACA,OAAO,IAAI;MACb,CAAC,CACH,CAAC;MACDjB,YAAY,CAACa,aAAa,CAACM,MAAM,CAACC,IAAI,IAAIA,IAAI,KAAK,IAAI,CAAC,CAAC;MACzDd,OAAO,CAACC,GAAG,CAACR,SAAS,CAAC;IACxB,CAAC;IACDS,kBAAkB,CAAC,CAAC;EACtB,CAAC,EAAE,CAACX,WAAW,CAACM,UAAU,CAAC,CAAC;EAI5B,MAAMe,qBAAqB,GAAG,MAAON,UAAU,IAAK;IAClD,IAAI;MACF,MAAMR,GAAG,GAAG,MAAMd,oBAAoB,CAACsB,UAAU,CAAC;MAClD,OAAOR,GAAG;IACZ,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEF,KAAK,CAAC;MACpC,OAAO,IAAI;IACb;EACF,CAAC;EAID,oBACEV,OAAA,CAAAF,SAAA,mBAEE,CAAC;AAEP,CAAC;AAAAK,EAAA,CAtDKF,sBAAsB;AAAAyB,EAAA,GAAtBzB,sBAAsB;AAwD5B,eAAeA,sBAAsB;AAAA,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}