{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\carax\\\\Desktop\\\\\\uC0AC\\uC774\\uB4DC \\uD504\\uB85C\\uC81D\\uD2B8\\\\SFDB-Project\\\\front\\\\src\\\\pages\\\\detail\\\\MovieDetailMidSection2.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MovieDetailMidSection2 = ({\n  movieDetail\n}) => {\n  _s();\n  const [directors, setDirectors] = useState([]);\n  useEffect(() => {\n    const fetchDirectorsInfo = async () => {\n      const directorIds = movieDetail.directorIds ? movieDetail.directorIds.split(',') : [];\n      const directorsInfo = await Promise.all(directorIds.map(async directorId => {\n        if (directorId) {\n          try {\n            return await directorInfoDB(directorId); // 이 부분에 해당하는 함수를 호출해야 합니다.\n          } catch (error) {\n            console.log('감독 정보 로드 실패 : ', error);\n            return null;\n          }\n        }\n        return null;\n      }));\n      setDirectors(directorsInfo.filter(info => info !== null));\n    };\n    fetchDirectorsInfo();\n  }, [movieDetail.directorIds]);\n  const creditInfoStyle = {};\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: creditInfoStyle,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"\\uAC10\\uB3C5 \\uC815\\uBCF4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this), directors.map((director, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\uC774\\uB984: \", director === null || director === void 0 ? void 0 : director.directorNm]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(MovieDetailMidSection2, \"MOMXR1SbmS2ZUbc3rI2O9ok3sSA=\");\n_c = MovieDetailMidSection2;\nexport default MovieDetailMidSection2;\nvar _c;\n$RefreshReg$(_c, \"MovieDetailMidSection2\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","MovieDetailMidSection2","movieDetail","_s","directors","setDirectors","fetchDirectorsInfo","directorIds","split","directorsInfo","Promise","all","map","directorId","directorInfoDB","error","console","log","filter","info","creditInfoStyle","children","style","fileName","_jsxFileName","lineNumber","columnNumber","director","index","directorNm","_c","$RefreshReg$"],"sources":["C:/Users/carax/Desktop/사이드 프로젝트/SFDB-Project/front/src/pages/detail/MovieDetailMidSection2.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nconst MovieDetailMidSection2 = ({ movieDetail }) => {\r\n  const [directors, setDirectors] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchDirectorsInfo = async () => {\r\n      const directorIds = movieDetail.directorIds ? movieDetail.directorIds.split(',') : [];\r\n\r\n      const directorsInfo = await Promise.all(\r\n        directorIds.map(async (directorId) => {\r\n          if (directorId) {\r\n            try {\r\n              return await directorInfoDB(directorId); // 이 부분에 해당하는 함수를 호출해야 합니다.\r\n            } catch (error) {\r\n              console.log('감독 정보 로드 실패 : ', error);\r\n              return null;\r\n            }\r\n          }\r\n          return null;\r\n        })\r\n      );\r\n\r\n      setDirectors(directorsInfo.filter(info => info !== null));\r\n    };\r\n\r\n    fetchDirectorsInfo();\r\n  }, [movieDetail.directorIds]);\r\n\r\n  const creditInfoStyle = {};\r\n\r\n  return (\r\n    <>\r\n      <div style={creditInfoStyle}>\r\n        <h3>감독 정보</h3>\r\n        {directors.map((director, index) => (\r\n          <div key={index}>\r\n            <p>이름: {director?.directorNm}</p>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MovieDetailMidSection2;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEnD,MAAMC,sBAAsB,GAAGA,CAAC;EAAEC;AAAY,CAAC,KAAK;EAAAC,EAAA;EAClD,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAE9CD,SAAS,CAAC,MAAM;IACd,MAAMW,kBAAkB,GAAG,MAAAA,CAAA,KAAY;MACrC,MAAMC,WAAW,GAAGL,WAAW,CAACK,WAAW,GAAGL,WAAW,CAACK,WAAW,CAACC,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE;MAErF,MAAMC,aAAa,GAAG,MAAMC,OAAO,CAACC,GAAG,CACrCJ,WAAW,CAACK,GAAG,CAAC,MAAOC,UAAU,IAAK;QACpC,IAAIA,UAAU,EAAE;UACd,IAAI;YACF,OAAO,MAAMC,cAAc,CAACD,UAAU,CAAC,CAAC,CAAC;UAC3C,CAAC,CAAC,OAAOE,KAAK,EAAE;YACdC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEF,KAAK,CAAC;YACpC,OAAO,IAAI;UACb;QACF;QACA,OAAO,IAAI;MACb,CAAC,CACH,CAAC;MAEDV,YAAY,CAACI,aAAa,CAACS,MAAM,CAACC,IAAI,IAAIA,IAAI,KAAK,IAAI,CAAC,CAAC;IAC3D,CAAC;IAEDb,kBAAkB,CAAC,CAAC;EACtB,CAAC,EAAE,CAACJ,WAAW,CAACK,WAAW,CAAC,CAAC;EAE7B,MAAMa,eAAe,GAAG,CAAC,CAAC;EAE1B,oBACEtB,OAAA,CAAAE,SAAA;IAAAqB,QAAA,eACEvB,OAAA;MAAKwB,KAAK,EAAEF,eAAgB;MAAAC,QAAA,gBAC1BvB,OAAA;QAAAuB,QAAA,EAAI;MAAK;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EACbtB,SAAS,CAACQ,GAAG,CAAC,CAACe,QAAQ,EAAEC,KAAK,kBAC7B9B,OAAA;QAAAuB,QAAA,eACEvB,OAAA;UAAAuB,QAAA,GAAG,gBAAI,EAACM,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEE,UAAU;QAAA;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI;MAAC,GADzBE,KAAK;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEV,CACN,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC;EAAC,gBACN,CAAC;AAEP,CAAC;AAACvB,EAAA,CAzCIF,sBAAsB;AAAA6B,EAAA,GAAtB7B,sBAAsB;AA2C5B,eAAeA,sBAAsB;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}