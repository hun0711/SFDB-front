{"ast":null,"code":"import axios from \"axios\";\nexport const userLoginDB = async data => {\n  try {\n    const res = await axios.post(`http://localhost:8000/user/login`, data);\n    // 서버로부터 받은 응답 데이터를 반환합니다.\n    return res.data;\n  } catch (error) {\n    // 요청이 실패했을 때 오류를 콘솔에 출력하고 오류 객체를 반환합니다.\n    console.error(\"Error during idCheckDB request:\", error);\n    throw error; // 이 오류를 호출자에게 전달하여 처리하도록 합니다.\n  }\n};\n\nexport const googleSocialLogin = async data => {\n  try {\n    const res = await axios.post(\"http://localhost:8000/user/login/google\", data);\n    return res.data;\n  } catch (error) {\n    console.error(\"Error : \", error);\n    throw error;\n  }\n};\nexport const googleUserInfo = async token => {\n  try {\n    const res = await axios.get(\"https://www.googleapis.com/userinfo/v2/me\", {\n      headers: {\n        Authorization: `Bearer ${token}` // 액세스 토큰을 베어러 토큰으로 설정합니다.\n      }\n    });\n\n    return res.data;\n  } catch (error) {\n    console.error(\"Error : \", error);\n    throw error;\n  }\n};\nexport const naverSocialLogin = async data => {\n  try {\n    const res = await axios.post(\"http://localhost:8000/user/login/naver\", data);\n    return res.data;\n  } catch (error) {\n    console.error(\"Error : \", error);\n    throw error;\n  }\n};\nexport const kakaoSocialLogin = async data => {\n  try {\n    const res = await axios.post(`http://localhost:8000/user/login/kakao`, data);\n    return res.data;\n  } catch (error) {\n    console.log(\"Error : \", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","userLoginDB","data","res","post","error","console","googleSocialLogin","googleUserInfo","token","get","headers","Authorization","naverSocialLogin","kakaoSocialLogin","log"],"sources":["C:/Users/carax/Desktop/사이드 프로젝트/SFDB-Project/front/src/axios/user/loginLogic.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nexport const userLoginDB = async (data) => {\r\n  try {\r\n    const res = await axios.post(`http://localhost:8000/user/login`, data);\r\n    // 서버로부터 받은 응답 데이터를 반환합니다.\r\n    return res.data;\r\n  } catch (error) {\r\n    // 요청이 실패했을 때 오류를 콘솔에 출력하고 오류 객체를 반환합니다.\r\n    console.error(\"Error during idCheckDB request:\", error);\r\n    throw error; // 이 오류를 호출자에게 전달하여 처리하도록 합니다.\r\n  }\r\n};\r\n\r\nexport const googleSocialLogin = async (data) => {\r\n  try {\r\n    const res = await axios.post(\r\n      \"http://localhost:8000/user/login/google\",\r\n      data\r\n    );\r\n    return res.data;\r\n  } catch (error) {\r\n    console.error(\"Error : \", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const googleUserInfo = async (token) => {\r\n  try {\r\n    const res = await axios.get(\"https://www.googleapis.com/userinfo/v2/me\", {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`, // 액세스 토큰을 베어러 토큰으로 설정합니다.\r\n      },\r\n    });\r\n    return res.data;\r\n  } catch (error) {\r\n    console.error(\"Error : \", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const naverSocialLogin = async (data) => {\r\n  try {\r\n    const res = await axios.post(\r\n      \"http://localhost:8000/user/login/naver\",\r\n      data\r\n    );\r\n    return res.data;\r\n  } catch (error) {\r\n    console.error(\"Error : \", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const kakaoSocialLogin = async (data) => {\r\n  try {\r\n    const res = await axios.post(\r\n      `http://localhost:8000/user/login/kakao`,\r\n      data\r\n    );\r\n    return res.data;\r\n  } catch (error) {\r\n    console.log(\"Error : \", error);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,OAAO,MAAMC,WAAW,GAAG,MAAOC,IAAI,IAAK;EACzC,IAAI;IACF,MAAMC,GAAG,GAAG,MAAMH,KAAK,CAACI,IAAI,CAAE,kCAAiC,EAAEF,IAAI,CAAC;IACtE;IACA,OAAOC,GAAG,CAACD,IAAI;EACjB,CAAC,CAAC,OAAOG,KAAK,EAAE;IACd;IACAC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IACvD,MAAMA,KAAK,CAAC,CAAC;EACf;AACF,CAAC;;AAED,OAAO,MAAME,iBAAiB,GAAG,MAAOL,IAAI,IAAK;EAC/C,IAAI;IACF,MAAMC,GAAG,GAAG,MAAMH,KAAK,CAACI,IAAI,CAC1B,yCAAyC,EACzCF,IACF,CAAC;IACD,OAAOC,GAAG,CAACD,IAAI;EACjB,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,UAAU,EAAEA,KAAK,CAAC;IAChC,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMG,cAAc,GAAG,MAAOC,KAAK,IAAK;EAC7C,IAAI;IACF,MAAMN,GAAG,GAAG,MAAMH,KAAK,CAACU,GAAG,CAAC,2CAA2C,EAAE;MACvEC,OAAO,EAAE;QACPC,aAAa,EAAG,UAASH,KAAM,EAAC,CAAE;MACpC;IACF,CAAC,CAAC;;IACF,OAAON,GAAG,CAACD,IAAI;EACjB,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,UAAU,EAAEA,KAAK,CAAC;IAChC,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMQ,gBAAgB,GAAG,MAAOX,IAAI,IAAK;EAC9C,IAAI;IACF,MAAMC,GAAG,GAAG,MAAMH,KAAK,CAACI,IAAI,CAC1B,wCAAwC,EACxCF,IACF,CAAC;IACD,OAAOC,GAAG,CAACD,IAAI;EACjB,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,UAAU,EAAEA,KAAK,CAAC;IAChC,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMS,gBAAgB,GAAG,MAAOZ,IAAI,IAAK;EAC9C,IAAI;IACF,MAAMC,GAAG,GAAG,MAAMH,KAAK,CAACI,IAAI,CACzB,wCAAuC,EACxCF,IACF,CAAC;IACD,OAAOC,GAAG,CAACD,IAAI;EACjB,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdC,OAAO,CAACS,GAAG,CAAC,UAAU,EAAEV,KAAK,CAAC;IAC9B,MAAMA,KAAK;EACb;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}