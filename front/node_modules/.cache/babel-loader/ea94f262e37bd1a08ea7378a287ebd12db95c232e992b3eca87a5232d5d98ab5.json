{"ast":null,"code":"import axios from \"axios\";\n\n//ID 중복체크 axios 로직\nexport const idCheckDB = async id => {\n  try {\n    const res = await axios.get(`http://localhost:8000/register/idCheck`, {\n      params: {\n        userId: id\n      }\n    });\n    // 서버로부터 받은 응답 데이터를 반환합니다.\n    return res.data;\n  } catch (error) {\n    // 요청이 실패했을 때 오류를 콘솔에 출력하고 오류 객체를 반환합니다.\n    console.error(\"Error during idCheckDB request:\", error);\n    throw error; // 이 오류를 호출자에게 전달하여 처리하도록 합니다.\n  }\n};\n\n//회원가입 axios 로직\nexport const regInsertDB = data => {\n  console.log(data);\n  return new Promise((resolve, reject) => {\n    try {\n      const response = axios({\n        method: \"post\",\n        //@RequestBody\n        url: \"http://localhost:8000/register/userJoin\",\n        data: data\n      });\n      resolve(response);\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\nexport const withdrawUserDB = userId => {};","map":{"version":3,"names":["axios","idCheckDB","id","res","get","params","userId","data","error","console","regInsertDB","log","Promise","resolve","reject","response","method","url","withdrawUserDB"],"sources":["C:/Users/carax/Desktop/사이드 프로젝트/SFDB-Project/front/src/axios/user/registerLogic.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\n//ID 중복체크 axios 로직\r\nexport const idCheckDB = async (id) => {\r\n  try {\r\n    const res = await axios.get(`http://localhost:8000/register/idCheck`, {\r\n      params: {\r\n        userId: id,\r\n      },\r\n    });\r\n    // 서버로부터 받은 응답 데이터를 반환합니다.\r\n    return res.data;\r\n  } catch (error) {\r\n    // 요청이 실패했을 때 오류를 콘솔에 출력하고 오류 객체를 반환합니다.\r\n    console.error(\"Error during idCheckDB request:\", error);\r\n    throw error; // 이 오류를 호출자에게 전달하여 처리하도록 합니다.\r\n  }\r\n};\r\n\r\n//회원가입 axios 로직\r\nexport const regInsertDB = (data) => {\r\n  console.log(data);\r\n  return new Promise((resolve, reject) => {\r\n    try {\r\n      const response = axios({\r\n        method: \"post\", //@RequestBody\r\n        url: \"http://localhost:8000/register/userJoin\", \r\n        data: data,\r\n      });\r\n      resolve(response);\r\n    } catch (error) {\r\n      reject(error);\r\n    }\r\n  });\r\n};\r\n\r\n\r\nexport const withdrawUserDB = (userId) => {\r\n  \r\n}"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,OAAO,MAAMC,SAAS,GAAG,MAAOC,EAAE,IAAK;EACrC,IAAI;IACF,MAAMC,GAAG,GAAG,MAAMH,KAAK,CAACI,GAAG,CAAE,wCAAuC,EAAE;MACpEC,MAAM,EAAE;QACNC,MAAM,EAAEJ;MACV;IACF,CAAC,CAAC;IACF;IACA,OAAOC,GAAG,CAACI,IAAI;EACjB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd;IACAC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IACvD,MAAMA,KAAK,CAAC,CAAC;EACf;AACF,CAAC;;AAED;AACA,OAAO,MAAME,WAAW,GAAIH,IAAI,IAAK;EACnCE,OAAO,CAACE,GAAG,CAACJ,IAAI,CAAC;EACjB,OAAO,IAAIK,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC,IAAI;MACF,MAAMC,QAAQ,GAAGf,KAAK,CAAC;QACrBgB,MAAM,EAAE,MAAM;QAAE;QAChBC,GAAG,EAAE,yCAAyC;QAC9CV,IAAI,EAAEA;MACR,CAAC,CAAC;MACFM,OAAO,CAACE,QAAQ,CAAC;IACnB,CAAC,CAAC,OAAOP,KAAK,EAAE;MACdM,MAAM,CAACN,KAAK,CAAC;IACf;EACF,CAAC,CAAC;AACJ,CAAC;AAGD,OAAO,MAAMU,cAAc,GAAIZ,MAAM,IAAK,CAE1C,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}