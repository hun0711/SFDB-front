{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\carax\\\\Desktop\\\\\\uC0AC\\uC774\\uB4DC \\uD504\\uB85C\\uC81D\\uD2B8\\\\SFDB-Project\\\\front\\\\src\\\\pages\\\\detail\\\\MovieDetailMidSection2.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport qs from 'qs'; // qs 라이브러리 임포트\nimport { directorInfoDB } from '../../axios/main/movieLogic';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MovieDetailMidSection2 = ({\n  movieDetail\n}) => {\n  _s();\n  const [directors, setDirectors] = useState([]);\n  console.log(movieDetail.directorIds);\n  useEffect(() => {\n    if (movieDetail && movieDetail.directorIds) {\n      const directorIds = movieDetail.directorIds.split(',');\n      console.log(directorIds);\n\n      // directorIds를 쿼리 문자열로 변환\n      const query = qs.stringify({\n        ids: directorIds\n      });\n      const fetchDirectorsInfo = async () => {\n        try {\n          const res = await directorInfoDB(query);\n          setDirectors(res);\n        } catch (error) {\n          console.log('감독 정보 로드 실패 : ', error);\n        }\n      };\n      fetchDirectorsInfo();\n    }\n  }, [movieDetail]);\n  const creditInfoStyle = {};\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: creditInfoStyle,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"\\uAC10\\uB3C5 \\uC815\\uBCF4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this), directors.map((director, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\uC774\\uB984: \", director === null || director === void 0 ? void 0 : director.directorNm]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(MovieDetailMidSection2, \"MOMXR1SbmS2ZUbc3rI2O9ok3sSA=\");\n_c = MovieDetailMidSection2;\nexport default MovieDetailMidSection2;\nvar _c;\n$RefreshReg$(_c, \"MovieDetailMidSection2\");","map":{"version":3,"names":["React","useEffect","useState","qs","directorInfoDB","jsxDEV","_jsxDEV","Fragment","_Fragment","MovieDetailMidSection2","movieDetail","_s","directors","setDirectors","console","log","directorIds","split","query","stringify","ids","fetchDirectorsInfo","res","error","creditInfoStyle","children","style","fileName","_jsxFileName","lineNumber","columnNumber","map","director","index","directorNm","_c","$RefreshReg$"],"sources":["C:/Users/carax/Desktop/사이드 프로젝트/SFDB-Project/front/src/pages/detail/MovieDetailMidSection2.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport qs from 'qs'; // qs 라이브러리 임포트\r\nimport { directorInfoDB } from '../../axios/main/movieLogic';\r\n\r\nconst MovieDetailMidSection2 = ({ movieDetail }) => {\r\n  const [directors, setDirectors] = useState([]);\r\n  console.log(movieDetail.directorIds);\r\n\r\n  useEffect(() => {\r\n    if (movieDetail && movieDetail.directorIds) {\r\n      const directorIds = movieDetail.directorIds.split(',');\r\n      console.log(directorIds);\r\n\r\n      // directorIds를 쿼리 문자열로 변환\r\n      const query = qs.stringify({ ids: directorIds });\r\n\r\n      const fetchDirectorsInfo = async () => {\r\n        try {\r\n          const res = await directorInfoDB(query);\r\n          setDirectors(res);\r\n        } catch (error) {\r\n          console.log('감독 정보 로드 실패 : ', error);\r\n        }\r\n      };\r\n\r\n      fetchDirectorsInfo();\r\n    }\r\n  }, [movieDetail]);\r\n\r\n  const creditInfoStyle = {};\r\n\r\n  return (\r\n    <>\r\n      <div style={creditInfoStyle}>\r\n        <h3>감독 정보</h3>\r\n        {directors.map((director, index) => (\r\n          <div key={index}>\r\n            <p>이름: {director?.directorNm}</p>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MovieDetailMidSection2;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,EAAE,MAAM,IAAI,CAAC,CAAC;AACrB,SAASC,cAAc,QAAQ,6BAA6B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE7D,MAAMC,sBAAsB,GAAGA,CAAC;EAAEC;AAAY,CAAC,KAAK;EAAAC,EAAA;EAClD,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC9CY,OAAO,CAACC,GAAG,CAACL,WAAW,CAACM,WAAW,CAAC;EAEpCf,SAAS,CAAC,MAAM;IACd,IAAIS,WAAW,IAAIA,WAAW,CAACM,WAAW,EAAE;MAC1C,MAAMA,WAAW,GAAGN,WAAW,CAACM,WAAW,CAACC,KAAK,CAAC,GAAG,CAAC;MACtDH,OAAO,CAACC,GAAG,CAACC,WAAW,CAAC;;MAExB;MACA,MAAME,KAAK,GAAGf,EAAE,CAACgB,SAAS,CAAC;QAAEC,GAAG,EAAEJ;MAAY,CAAC,CAAC;MAEhD,MAAMK,kBAAkB,GAAG,MAAAA,CAAA,KAAY;QACrC,IAAI;UACF,MAAMC,GAAG,GAAG,MAAMlB,cAAc,CAACc,KAAK,CAAC;UACvCL,YAAY,CAACS,GAAG,CAAC;QACnB,CAAC,CAAC,OAAOC,KAAK,EAAE;UACdT,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEQ,KAAK,CAAC;QACtC;MACF,CAAC;MAEDF,kBAAkB,CAAC,CAAC;IACtB;EACF,CAAC,EAAE,CAACX,WAAW,CAAC,CAAC;EAEjB,MAAMc,eAAe,GAAG,CAAC,CAAC;EAE1B,oBACElB,OAAA,CAAAE,SAAA;IAAAiB,QAAA,eACEnB,OAAA;MAAKoB,KAAK,EAAEF,eAAgB;MAAAC,QAAA,gBAC1BnB,OAAA;QAAAmB,QAAA,EAAI;MAAK;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EACblB,SAAS,CAACmB,GAAG,CAAC,CAACC,QAAQ,EAAEC,KAAK,kBAC7B3B,OAAA;QAAAmB,QAAA,eACEnB,OAAA;UAAAmB,QAAA,GAAG,gBAAI,EAACO,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEE,UAAU;QAAA;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI;MAAC,GADzBG,KAAK;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEV,CACN,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC;EAAC,gBACN,CAAC;AAEP,CAAC;AAACnB,EAAA,CAvCIF,sBAAsB;AAAA0B,EAAA,GAAtB1B,sBAAsB;AAyC5B,eAAeA,sBAAsB;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}