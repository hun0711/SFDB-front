{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\carax\\\\Desktop\\\\\\uC0AC\\uC774\\uB4DC \\uD504\\uB85C\\uC81D\\uD2B8\\\\SFDB-Project\\\\front\\\\src\\\\pages\\\\user\\\\GoogleLoginBtn.jsx\";\nimport React from 'react';\nimport GoogleLogin from 'react-google-login';\nimport { userLoginDB } from '../../axios/user/loginLogic';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GoogleLoginBtn = ({\n  onClick,\n  disabled\n}) => /*#__PURE__*/_jsxDEV(\"button\", {\n  onClick: onClick,\n  disabled: disabled,\n  style: {\n    cursor: 'pointer',\n    border: 'none',\n    background: 'none'\n  },\n  children: /*#__PURE__*/_jsxDEV(\"img\", {\n    src: \"/images/logo/google.png\",\n    alt: \"\\uAD6C\\uAE00 \\uB85C\\uADF8\\uC778\",\n    style: {\n      width: '100%',\n      height: '100%'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 6,\n  columnNumber: 3\n}, this);\n\n// 구글 로그인 성공 콜백\n_c = GoogleLoginBtn;\nconst handleGoogleLoginSuccess = async response => {\n  try {\n    // 구글 로그인 성공 응답을 처리합니다.\n    // 구글 로그인을 위한 별도의 API 엔드포인트가 있다고 가정합니다.\n    const googleLoginData = {\n      tokenId: response.tokenId\n    };\n    const res = await userLoginDB(googleLoginData);\n    console.log('Google 로그인 결과:', res);\n    if (res === 1) {\n      // 구글 로그인이 성공적으로 처리됐을 때의 처리 (일반 로그인 처리와 유사)\n      document.cookie = serialize('userId', id, {\n        path: '/'\n      });\n      console.log(document.cookie);\n      navigate('/main');\n    } else {\n      // 구글 로그인이 실패했을 때의 처리\n      console.log('Google 로그인 실패');\n    }\n  } catch (error) {\n    console.error('Google 로그인 에러:', error);\n  }\n};\n\n// 구글 로그인 실패 콜백\nconst handleGoogleLoginFailure = error => {\n  console.error('Google 로그인 에러:', error);\n};\nexport default GoogleLoginBtn;\nexport { handleGoogleLoginSuccess, handleGoogleLoginFailure };\nvar _c;\n$RefreshReg$(_c, \"GoogleLoginBtn\");","map":{"version":3,"names":["React","GoogleLogin","userLoginDB","jsxDEV","_jsxDEV","GoogleLoginBtn","onClick","disabled","style","cursor","border","background","children","src","alt","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","handleGoogleLoginSuccess","response","googleLoginData","tokenId","res","console","log","document","cookie","serialize","id","path","navigate","error","handleGoogleLoginFailure","$RefreshReg$"],"sources":["C:/Users/carax/Desktop/사이드 프로젝트/SFDB-Project/front/src/pages/user/GoogleLoginBtn.jsx"],"sourcesContent":["import React from 'react';\r\nimport GoogleLogin from 'react-google-login';\r\nimport { userLoginDB } from '../../axios/user/loginLogic';\r\n\r\nconst GoogleLoginBtn = ({ onClick, disabled }) => (\r\n  <button onClick={onClick} disabled={disabled} style={{ cursor: 'pointer', border: 'none', background: 'none' }}>\r\n    <img src=\"/images/logo/google.png\" alt=\"구글 로그인\" style={{ width: '100%', height: '100%' }} />\r\n  </button>\r\n);\r\n\r\n// 구글 로그인 성공 콜백\r\nconst handleGoogleLoginSuccess = async (response) => {\r\n  try {\r\n    // 구글 로그인 성공 응답을 처리합니다.\r\n    // 구글 로그인을 위한 별도의 API 엔드포인트가 있다고 가정합니다.\r\n    const googleLoginData = {\r\n      tokenId: response.tokenId,\r\n    };\r\n    const res = await userLoginDB(googleLoginData);\r\n    console.log('Google 로그인 결과:', res);\r\n\r\n    if (res === 1) {\r\n      // 구글 로그인이 성공적으로 처리됐을 때의 처리 (일반 로그인 처리와 유사)\r\n      document.cookie = serialize('userId', id, { path: '/' });\r\n      console.log(document.cookie);\r\n      navigate('/main');\r\n    } else {\r\n      // 구글 로그인이 실패했을 때의 처리\r\n      console.log('Google 로그인 실패');\r\n    }\r\n  } catch (error) {\r\n    console.error('Google 로그인 에러:', error);\r\n  }\r\n};\r\n\r\n// 구글 로그인 실패 콜백\r\nconst handleGoogleLoginFailure = (error) => {\r\n  console.error('Google 로그인 에러:', error);\r\n};\r\n\r\nexport default GoogleLoginBtn;\r\nexport { handleGoogleLoginSuccess, handleGoogleLoginFailure };\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,WAAW,MAAM,oBAAoB;AAC5C,SAASC,WAAW,QAAQ,6BAA6B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1D,MAAMC,cAAc,GAAGA,CAAC;EAAEC,OAAO;EAAEC;AAAS,CAAC,kBAC3CH,OAAA;EAAQE,OAAO,EAAEA,OAAQ;EAACC,QAAQ,EAAEA,QAAS;EAACC,KAAK,EAAE;IAAEC,MAAM,EAAE,SAAS;IAAEC,MAAM,EAAE,MAAM;IAAEC,UAAU,EAAE;EAAO,CAAE;EAAAC,QAAA,eAC7GR,OAAA;IAAKS,GAAG,EAAC,yBAAyB;IAACC,GAAG,EAAC,iCAAQ;IAACN,KAAK,EAAE;MAAEO,KAAK,EAAE,MAAM;MAAEC,MAAM,EAAE;IAAO;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE;AAAC;EAAAH,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OACtF,CACT;;AAED;AAAAC,EAAA,GANMhB,cAAc;AAOpB,MAAMiB,wBAAwB,GAAG,MAAOC,QAAQ,IAAK;EACnD,IAAI;IACF;IACA;IACA,MAAMC,eAAe,GAAG;MACtBC,OAAO,EAAEF,QAAQ,CAACE;IACpB,CAAC;IACD,MAAMC,GAAG,GAAG,MAAMxB,WAAW,CAACsB,eAAe,CAAC;IAC9CG,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEF,GAAG,CAAC;IAElC,IAAIA,GAAG,KAAK,CAAC,EAAE;MACb;MACAG,QAAQ,CAACC,MAAM,GAAGC,SAAS,CAAC,QAAQ,EAAEC,EAAE,EAAE;QAAEC,IAAI,EAAE;MAAI,CAAC,CAAC;MACxDN,OAAO,CAACC,GAAG,CAACC,QAAQ,CAACC,MAAM,CAAC;MAC5BI,QAAQ,CAAC,OAAO,CAAC;IACnB,CAAC,MAAM;MACL;MACAP,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;IAC9B;EACF,CAAC,CAAC,OAAOO,KAAK,EAAE;IACdR,OAAO,CAACQ,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;EACxC;AACF,CAAC;;AAED;AACA,MAAMC,wBAAwB,GAAID,KAAK,IAAK;EAC1CR,OAAO,CAACQ,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;AACxC,CAAC;AAED,eAAe9B,cAAc;AAC7B,SAASiB,wBAAwB,EAAEc,wBAAwB;AAAG,IAAAf,EAAA;AAAAgB,YAAA,CAAAhB,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}