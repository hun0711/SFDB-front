{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\carax\\\\Desktop\\\\\\uC0AC\\uC774\\uB4DC \\uD504\\uB85C\\uC81D\\uD2B8\\\\SFDB-Project\\\\front\\\\src\\\\pages\\\\user\\\\GoogleLogin.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { gapi } from 'gapi-script';\nimport { Alert, AlertTitle } from '@mui/material';\nimport { googleSocialLogin } from '../../axios/user/loginLogic';\nimport config from '../../config';\nimport { serialize } from 'cookie';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst GoogleLogin = () => {\n  _s();\n  const [loginAlert, setLoginAlert] = useState(null);\n  {/* 구글 sdk */}\n  useEffect(() => {\n    const loadGoogleApiScript = async () => {\n      try {\n        await new Promise((resolve, reject) => {\n          const script = document.createElement('script');\n          script.src = 'https://apis.google.com/js/api.js';\n          script.onload = resolve;\n          script.onerror = reject;\n          document.body.appendChild(script);\n        });\n      } catch (error) {\n        console.error('Google API 스크립트 로드 실패:', error);\n      }\n    };\n    loadGoogleApiScript();\n  }, []);\n  {/*  구글 로그인 처리 함수 */}\n  const handleGoogleLogin = async () => {\n    try {\n      if (!gapi.auth2) {\n        // 구글 API 스크립트 로드를 기다리기 위해 promise를 사용\n        await new Promise(resolve => {\n          gapi.load('auth2', resolve);\n        });\n      }\n\n      // 'gapi.auth2'가 초기화되지 않았다면 초기화\n      if (!gapi.auth2.getAuthInstance()) {\n        gapi.auth2.init({\n          client_id: config.googleClientId,\n          cookie_policy: 'single_host_origin'\n        });\n      }\n      const auth2 = gapi.auth2.getAuthInstance();\n      const googleUser = await auth2.signIn();\n      // 구글 로그인 성공 시 처리\n      const googleLoginData = {\n        tokenId: googleUser.getAuthResponse().id_token,\n        userId: googleUser.getBasicProfile().getEmail()\n      };\n\n      // 스프링 백엔드와 통신하여 처리\n      const res = await googleSocialLogin(googleLoginData); // 스프링 백엔드의 구글 로그인 API 엔드포인트로 대체\n      console.log('Google 로그인 결과:', res);\n      if (res === 1) {\n        document.cookie = serialize('userId', googleLoginData.userId, {\n          path: '/'\n        });\n        document.cookie = serialize('tokenId', googleLoginData.tokenId, {\n          path: '/'\n        });\n        console.log(document.cookie);\n        setLoginAlert( /*#__PURE__*/_jsxDEV(Alert, {\n          severity: \"success\",\n          onClose: () => setLoginAlert(null),\n          children: [/*#__PURE__*/_jsxDEV(AlertTitle, {\n            children: \"\\uB85C\\uADF8\\uC778 \\uC131\\uACF5!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"\\uBA54\\uC778\\uD398\\uC774\\uC9C0\\uB85C \\uC774\\uB3D9\\uD569\\uB2C8\\uB2E4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 9\n        }, this));\n        setTimeout(() => {\n          navigate('/main');\n        }, 2000);\n      } else {\n        console.log('Google 로그인 실패');\n        setLoginAlert( /*#__PURE__*/_jsxDEV(Alert, {\n          severity: \"warning\",\n          onClose: () => setLoginAlert(null),\n          children: [/*#__PURE__*/_jsxDEV(AlertTitle, {\n            children: \"\\uB85C\\uADF8\\uC778 \\uC2E4\\uD328\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"\\uC785\\uB825 \\uC815\\uBCF4\\uB97C \\uB2E4\\uC2DC \\uD655\\uC778\\uD574\\uC8FC\\uC138\\uC694\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 9\n        }, this));\n      }\n    } catch (error) {\n      setLoginAlert( /*#__PURE__*/_jsxDEV(Alert, {\n        severity: \"error\",\n        onClose: () => setLoginAlert(null),\n        children: /*#__PURE__*/_jsxDEV(AlertTitle, {\n          children: \"\\uC5D0\\uB7EC \\uBC1C\\uC0DD\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 7\n      }, this));\n      console.error('Google 로그인 에러:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: 'center'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"/images/logo/googleSignin.png\",\n        alt: \"\\uAD6C\\uAE00 \\uB85C\\uADF8\\uC778\",\n        style: {\n          width: '100px',\n          height: '75px',\n          cursor: 'pointer'\n        },\n        onClick: handleGoogleLogin\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n_s(GoogleLogin, \"IAMG+CfdV3et90FHOUBrrtE8c1M=\");\n_c = GoogleLogin;\nexport default GoogleLogin;\nvar _c;\n$RefreshReg$(_c, \"GoogleLogin\");","map":{"version":3,"names":["React","useEffect","useState","gapi","Alert","AlertTitle","googleSocialLogin","config","serialize","jsxDEV","_jsxDEV","Fragment","_Fragment","GoogleLogin","_s","loginAlert","setLoginAlert","loadGoogleApiScript","Promise","resolve","reject","script","document","createElement","src","onload","onerror","body","appendChild","error","console","handleGoogleLogin","auth2","load","getAuthInstance","init","client_id","googleClientId","cookie_policy","googleUser","signIn","googleLoginData","tokenId","getAuthResponse","id_token","userId","getBasicProfile","getEmail","res","log","cookie","path","severity","onClose","children","fileName","_jsxFileName","lineNumber","columnNumber","setTimeout","navigate","style","textAlign","alt","width","height","cursor","onClick","_c","$RefreshReg$"],"sources":["C:/Users/carax/Desktop/사이드 프로젝트/SFDB-Project/front/src/pages/user/GoogleLogin.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { gapi } from 'gapi-script';\r\nimport { Alert, AlertTitle } from '@mui/material';\r\nimport { googleSocialLogin } from '../../axios/user/loginLogic';\r\nimport config from '../../config';\r\nimport { serialize } from 'cookie';\r\n\r\n\r\nconst GoogleLogin = () => {\r\n  const [loginAlert, setLoginAlert] = useState(null);\r\n\r\n\r\n{/* 구글 sdk */}\r\nuseEffect(() => {\r\n  const loadGoogleApiScript = async () => {\r\n    try {\r\n      await new Promise((resolve, reject) => {\r\n        const script = document.createElement('script');\r\n        script.src = 'https://apis.google.com/js/api.js';\r\n\r\n        script.onload = resolve;\r\n        script.onerror = reject;\r\n\r\n        document.body.appendChild(script);\r\n      });\r\n    } catch (error) {\r\n      console.error('Google API 스크립트 로드 실패:', error);\r\n    }\r\n  };\r\n\r\n  loadGoogleApiScript();\r\n}, []);\r\n\r\n\r\n\r\n {/*  구글 로그인 처리 함수 */}\r\n const handleGoogleLogin = async () => {\r\n  try {\r\n    if (!gapi.auth2) {\r\n      // 구글 API 스크립트 로드를 기다리기 위해 promise를 사용\r\n      await new Promise((resolve) => {\r\n        gapi.load('auth2', resolve);\r\n      });\r\n    }\r\n\r\n    // 'gapi.auth2'가 초기화되지 않았다면 초기화\r\n    if (!gapi.auth2.getAuthInstance()) {\r\n      gapi.auth2.init({\r\n        client_id: config.googleClientId,\r\n        cookie_policy: 'single_host_origin',\r\n      });\r\n    }\r\n\r\n    const auth2 = gapi.auth2.getAuthInstance();\r\n\r\n    const googleUser = await auth2.signIn();\r\n    // 구글 로그인 성공 시 처리\r\n    const googleLoginData = {\r\n      tokenId: googleUser.getAuthResponse().id_token,\r\n      userId : googleUser.getBasicProfile().getEmail()\r\n    };\r\n\r\n    // 스프링 백엔드와 통신하여 처리\r\n    const res = await googleSocialLogin(googleLoginData); // 스프링 백엔드의 구글 로그인 API 엔드포인트로 대체\r\n    console.log('Google 로그인 결과:', res);\r\n\r\n    if (res === 1) {\r\n      document.cookie = serialize('userId', googleLoginData.userId, { path: '/' });\r\n      document.cookie = serialize('tokenId', googleLoginData.tokenId, { path: '/'});\r\n      console.log(document.cookie);\r\n      setLoginAlert(\r\n        <Alert severity=\"success\" onClose={() => setLoginAlert(null)}>\r\n          <AlertTitle>로그인 성공!</AlertTitle>\r\n          <strong>메인페이지로 이동합니다</strong>\r\n        </Alert>\r\n      );\r\n      setTimeout(() => {\r\n        navigate('/main');\r\n      }, 2000)\r\n    } else {\r\n      console.log('Google 로그인 실패');\r\n      setLoginAlert(\r\n        <Alert severity=\"warning\" onClose={() => setLoginAlert(null)}>\r\n          <AlertTitle>로그인 실패</AlertTitle>\r\n          <strong>입력 정보를 다시 확인해주세요</strong>\r\n        </Alert>\r\n      );\r\n    }\r\n  } catch (error) {\r\n    setLoginAlert(\r\n      <Alert severity=\"error\" onClose={() => setLoginAlert(null)}>\r\n        <AlertTitle>에러 발생</AlertTitle>\r\n      </Alert>\r\n    );\r\n    console.error('Google 로그인 에러:', error);\r\n  }\r\n};\r\n\r\n  return (\r\n    <>\r\n        <div style={{ textAlign: 'center' }}>\r\n              <img\r\n                src=\"/images/logo/googleSignin.png\"\r\n                alt=\"구글 로그인\"\r\n                style={{ width: '100px', height: '75px', cursor: 'pointer' }}\r\n                onClick={handleGoogleLogin}\r\n              />\r\n            </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default GoogleLogin"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}