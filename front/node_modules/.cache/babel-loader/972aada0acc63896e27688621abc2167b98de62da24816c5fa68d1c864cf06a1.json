{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\carax\\\\Desktop\\\\\\uC0AC\\uC774\\uB4DC \\uD504\\uB85C\\uC81D\\uD2B8\\\\SFDB-Project\\\\front\\\\src\\\\pages\\\\user\\\\GoogleLogin.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { gapi } from 'gapi-script';\nimport { googleSocialLogin, googleUserInfo } from '../../axios/user/loginLogic';\nimport config from '../../config';\nimport { serialize } from 'cookie';\nimport { useNavigate } from 'react-router';\nimport { Alert, Snackbar } from '@mui/material';\nimport { useSnackbar } from 'notistack';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst GoogleLogin = () => {\n  _s();\n  const navigate = useNavigate();\n  const [alertOn, setAlertOn] = useState(false);\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n  const handleClose = () => {\n    setAlertOn(false);\n  };\n  {/* 구글 sdk */}\n  useEffect(() => {\n    const loadGoogleApiScript = async () => {\n      try {\n        await new Promise((resolve, reject) => {\n          const script = document.createElement('script');\n          script.src = 'https://apis.google.com/js/api.js';\n          script.onload = resolve;\n          script.onerror = reject;\n          document.body.appendChild(script);\n        });\n      } catch (error) {\n        console.error('Google API 스크립트 로드 실패:', error);\n      }\n    };\n    loadGoogleApiScript();\n  }, []);\n  {/*  구글 로그인 처리 함수 */}\n  const handleGoogleLogin = async () => {\n    try {\n      if (!gapi.auth2) {\n        // 구글 API 스크립트 로드를 기다리기 위해 promise를 사용\n        await new Promise(resolve => {\n          gapi.load('auth2', resolve);\n        });\n      }\n\n      // 'gapi.auth2'가 초기화되지 않았다면 초기화\n      if (!gapi.auth2.getAuthInstance()) {\n        gapi.auth2.init({\n          client_id: config.googleClientId,\n          cookie_policy: 'single_host_origin',\n          scope: 'profile email'\n        });\n      }\n      const auth2 = gapi.auth2.getAuthInstance();\n      const googleUser = await auth2.signIn();\n      const googleAccessToken = googleUser.getAuthResponse().access_token;\n      console.log('Google Access Token:', googleAccessToken);\n      const googleLoginData = await googleUserInfo(googleAccessToken);\n\n      // 스프링 백엔드와 통신하여 처리\n      const res = await googleSocialLogin(googleLoginData); // 스프링 백엔드의 구글 로그인 API 엔드포인트로 대체\n      console.log('Google 로그인 결과:', res);\n      if (res === 1) {\n        document.cookie = serialize('userId', googleLoginData.id, {\n          path: '/'\n        });\n        document.cookie = serialize('userEmail', googleLoginData.email, {\n          path: '/'\n        });\n        document.cookie = serialize('userName', googleLoginData.name, {\n          path: '/'\n        });\n        document.cookie = serialize('userProfileImage', googleLoginData.picture, {\n          path: '/'\n        });\n        navigate('/main');\n        enqueueSnackbar('로그인에 성공했습니다!', {\n          variant: 'success'\n        });\n        setAlertOn(true);\n      } else {\n        console.log('Google 로그인 실패');\n        enqueueSnackbar('로그인에 실패했습니다.', {\n          variant: 'warning'\n        });\n        setAlertOn(true);\n      }\n    } catch (error) {\n      console.error('Google 로그인 에러:', error);\n      enqueueSnackbar('네트워크 오류 발생!', {\n        variant: 'error'\n      });\n      setAlertOn(true);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: 'center'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"/images/logo/googlebtn2.png\",\n        alt: \"\\uAD6C\\uAE00 \\uB85C\\uADF8\\uC778\",\n        style: {\n          width: '220px',\n          height: '50px',\n          cursor: 'pointer'\n        },\n        onClick: handleGoogleLogin\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: alertOn,\n      autoHideDuration: 3000,\n      onClose: handleClose,\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        onClose: handleClose,\n        severity: \"success\",\n        sx: {\n          width: '100%'\n        },\n        children: \"\\uB85C\\uADF8\\uC778\\uC5D0 \\uC131\\uACF5\\uD588\\uC2B5\\uB2C8\\uB2E4!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(GoogleLogin, \"/COGwWDiCj73Wg4YNzawmJKeRSs=\", false, function () {\n  return [useNavigate, useSnackbar];\n});\n_c = GoogleLogin;\nexport default GoogleLogin;\nvar _c;\n$RefreshReg$(_c, \"GoogleLogin\");","map":{"version":3,"names":["React","useEffect","useState","gapi","googleSocialLogin","googleUserInfo","config","serialize","useNavigate","Alert","Snackbar","useSnackbar","jsxDEV","_jsxDEV","Fragment","_Fragment","GoogleLogin","_s","navigate","alertOn","setAlertOn","enqueueSnackbar","handleClose","loadGoogleApiScript","Promise","resolve","reject","script","document","createElement","src","onload","onerror","body","appendChild","error","console","handleGoogleLogin","auth2","load","getAuthInstance","init","client_id","googleClientId","cookie_policy","scope","googleUser","signIn","googleAccessToken","getAuthResponse","access_token","log","googleLoginData","res","cookie","id","path","email","name","picture","variant","children","style","textAlign","alt","width","height","cursor","onClick","fileName","_jsxFileName","lineNumber","columnNumber","open","autoHideDuration","onClose","severity","sx","_c","$RefreshReg$"],"sources":["C:/Users/carax/Desktop/사이드 프로젝트/SFDB-Project/front/src/pages/user/GoogleLogin.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { gapi } from 'gapi-script';\r\nimport { googleSocialLogin, googleUserInfo } from '../../axios/user/loginLogic';\r\nimport config from '../../config';\r\nimport { serialize } from 'cookie';\r\nimport { useNavigate } from 'react-router';\r\nimport { Alert, Snackbar } from '@mui/material';\r\nimport { useSnackbar } from 'notistack';\r\n\r\n\r\nconst GoogleLogin = () => {\r\n  const navigate = useNavigate()\r\n  const [alertOn, setAlertOn] = useState(false);\r\n  const { enqueueSnackbar } = useSnackbar(); \r\n  \r\n  const handleClose = () => {\r\n    setAlertOn(false)\r\n  }\r\n\r\n\r\n{/* 구글 sdk */}\r\nuseEffect(() => {\r\n  const loadGoogleApiScript = async () => {\r\n    try {\r\n      await new Promise((resolve, reject) => {\r\n        const script = document.createElement('script');\r\n        script.src = 'https://apis.google.com/js/api.js';\r\n\r\n        script.onload = resolve;\r\n        script.onerror = reject;\r\n\r\n        document.body.appendChild(script);\r\n      });\r\n    } catch (error) {\r\n      console.error('Google API 스크립트 로드 실패:', error);\r\n    }\r\n  };\r\n\r\n  loadGoogleApiScript();\r\n}, []);\r\n\r\n\r\n\r\n {/*  구글 로그인 처리 함수 */}\r\n const handleGoogleLogin = async () => {\r\n  try {\r\n    if (!gapi.auth2) {\r\n      // 구글 API 스크립트 로드를 기다리기 위해 promise를 사용\r\n      await new Promise((resolve) => {\r\n        gapi.load('auth2', resolve);\r\n      });\r\n    }\r\n\r\n    // 'gapi.auth2'가 초기화되지 않았다면 초기화\r\n    if (!gapi.auth2.getAuthInstance()) {\r\n      gapi.auth2.init({\r\n        client_id: config.googleClientId,\r\n        cookie_policy: 'single_host_origin',\r\n        scope : 'profile email'\r\n      });\r\n    }\r\n\r\n    const auth2 = gapi.auth2.getAuthInstance();\r\n    const googleUser = await auth2.signIn();\r\n    const googleAccessToken = googleUser.getAuthResponse().access_token;\r\n    console.log('Google Access Token:', googleAccessToken);\r\n    const googleLoginData = await googleUserInfo(googleAccessToken)\r\n\r\n\r\n    // 스프링 백엔드와 통신하여 처리\r\n    const res = await googleSocialLogin(googleLoginData); // 스프링 백엔드의 구글 로그인 API 엔드포인트로 대체\r\n    console.log('Google 로그인 결과:', res);\r\n\r\n    if (res === 1) {\r\n      document.cookie = serialize('userId', googleLoginData.id, { path: '/' }); \r\n      document.cookie = serialize('userEmail', googleLoginData.email, { path: '/' }); \r\n      document.cookie = serialize('userName', googleLoginData.name, { path: '/' }); \r\n      document.cookie = serialize('userProfileImage', googleLoginData.picture, { path: '/' }); \r\n      navigate('/main');\r\n      enqueueSnackbar('로그인에 성공했습니다!', { variant: 'success' });\r\n      setAlertOn(true)      \r\n    } else {\r\n      console.log('Google 로그인 실패');\r\n      enqueueSnackbar('로그인에 실패했습니다.', { variant: 'warning' });\r\n      setAlertOn(true);\r\n    }\r\n  } catch (error) {\r\n    console.error('Google 로그인 에러:', error);\r\n    enqueueSnackbar('네트워크 오류 발생!', { variant: 'error' });\r\n    setAlertOn(true);\r\n  }\r\n};\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n        <div style={{ textAlign: 'center' }}>\r\n          <img\r\n          src=\"/images/logo/googlebtn2.png\"\r\n          alt=\"구글 로그인\"\r\n          style={{ width: '220px', height: '50px', cursor: 'pointer' }}\r\n          onClick={handleGoogleLogin}\r\n        />\r\n            </div>\r\n            <Snackbar open={alertOn} autoHideDuration={3000} onClose={handleClose}>\r\n          <Alert onClose={handleClose} severity=\"success\" sx={{ width: '100%' }}>\r\n            로그인에 성공했습니다!\r\n          </Alert>\r\n        </Snackbar>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default GoogleLogin"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}