{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\carax\\\\Desktop\\\\\\uC0AC\\uC774\\uB4DC \\uD504\\uB85C\\uC81D\\uD2B8\\\\SFDB-Project\\\\front\\\\src\\\\pages\\\\user\\\\NaverLogin.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { naverSocialLogin } from '../../axios/user/loginLogic';\nimport { serialize } from 'cookie';\nimport config from '../../config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NaverLogin = () => {\n  _s();\n  // 네이버 스크립트를 로드\n  useEffect(() => {\n    // 네이버 SDK 스크립트 로드\n    const script = document.createElement(\"script\");\n    script.src = \"https://static.nid.naver.com/js/naveridlogin_js_sdk_2.0.2.js\";\n    script.charset = \"utf-8\";\n    script.onload = () => {\n      initializeNaverLogin();\n    };\n    document.body.appendChild(script);\n  }, []);\n  {/* 네이버 로그인 처리 함수 */}\n  const handleNaverLogin = async () => {\n    try {\n      if (!naverScriptLoaded) {\n        // 네이버 스크립트가 로드되지 않았다면, 처리를 중단하거나 오류 메시지를 표시합니다.\n        console.error('네이버 스크립트 로드 중이므로 네이버 로그인을 진행할 수 없습니다.');\n        return;\n      }\n\n      // 네이버 아이디로 로그인 인스턴스 생성\n      const naverLogin = new window.naver.LoginWithNaverId({\n        clientId: config.naverClientId,\n        callbackUrl: config.naverRedirectUri,\n        isPopup: true,\n        callbackHandle: true\n      });\n\n      // 초기화\n      await naverLogin.init();\n\n      // 로그인 상태 체크\n      if (naverLogin.user) {\n        // 사용자 정보\n        const naverLoginData = {\n          userId: naverLogin.user.id,\n          userEmail: naverLogin.user.email,\n          userName: naverLogin.user.nickname,\n          userImage: naverLogin.user.profileImage\n        };\n        const res = await naverSocialLogin(naverLoginData);\n\n        // 로그인 성공 여부에 따라 처리\n        if (res.success) {\n          console.log('로그인 성공');\n          document.cookie = serialize('userId', naverLoginData.userId, {\n            path: '/'\n          });\n          document.cookie = serialize('userEmail', naverLoginData.userEmail, {\n            path: '/'\n          });\n          document.cookie = serialize('userName', naverLoginData.userName, {\n            path: '/'\n          });\n          document.cookie = serialize('userImage', naverLoginData.userImage, {\n            path: '/'\n          });\n          // 여기서 원하는 경로로 리다이렉트 또는 상태를 변경하여 처리할 수 있습니다.\n        } else {\n          console.log('백엔드에서 로그인 처리 실패:', res.error);\n        }\n      } else {\n        console.log('네이버 아이디로 로그인을 취소하였습니다.');\n      }\n    } catch (error) {\n      console.error('네이버 아이디로 로그인 실패:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: 'center'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"img\", {\n      src: \"/images/logo/naver.png\",\n      alt: \"\\uB124\\uC774\\uBC84 \\uB85C\\uADF8\\uC778\",\n      style: {\n        width: '70px',\n        height: '70px',\n        cursor: 'pointer'\n      },\n      onClick: handleNaverLogin\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n_s(NaverLogin, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = NaverLogin;\nexport default NaverLogin;\nvar _c;\n$RefreshReg$(_c, \"NaverLogin\");","map":{"version":3,"names":["React","useEffect","useState","naverSocialLogin","serialize","config","jsxDEV","_jsxDEV","NaverLogin","_s","script","document","createElement","src","charset","onload","initializeNaverLogin","body","appendChild","handleNaverLogin","naverScriptLoaded","console","error","naverLogin","window","naver","LoginWithNaverId","clientId","naverClientId","callbackUrl","naverRedirectUri","isPopup","callbackHandle","init","user","naverLoginData","userId","id","userEmail","email","userName","nickname","userImage","profileImage","res","success","log","cookie","path","style","textAlign","children","alt","width","height","cursor","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/carax/Desktop/사이드 프로젝트/SFDB-Project/front/src/pages/user/NaverLogin.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { naverSocialLogin } from '../../axios/user/loginLogic';\r\nimport { serialize } from 'cookie';\r\nimport config from '../../config';\r\n\r\nconst NaverLogin= () => {\r\n\r\n    // 네이버 스크립트를 로드\r\n    useEffect(() => {\r\n      // 네이버 SDK 스크립트 로드\r\n      const script = document.createElement(\"script\");\r\n      script.src = \"https://static.nid.naver.com/js/naveridlogin_js_sdk_2.0.2.js\";\r\n      script.charset = \"utf-8\";\r\n      script.onload = () => {\r\n        initializeNaverLogin();\r\n      };\r\n      document.body.appendChild(script);\r\n    }, []);\r\n\r\n\r\n  {/* 네이버 로그인 처리 함수 */}\r\n  const handleNaverLogin = async () => {\r\n    try {\r\n      if (!naverScriptLoaded) {\r\n        // 네이버 스크립트가 로드되지 않았다면, 처리를 중단하거나 오류 메시지를 표시합니다.\r\n        console.error('네이버 스크립트 로드 중이므로 네이버 로그인을 진행할 수 없습니다.');\r\n        return;\r\n      }\r\n\r\n      // 네이버 아이디로 로그인 인스턴스 생성\r\n      const naverLogin = new window.naver.LoginWithNaverId({\r\n        clientId: config.naverClientId,\r\n        callbackUrl: config.naverRedirectUri,\r\n        isPopup: true,\r\n        callbackHandle: true,\r\n      });\r\n\r\n      // 초기화\r\n      await naverLogin.init();\r\n\r\n      // 로그인 상태 체크\r\n      if (naverLogin.user) {\r\n        // 사용자 정보\r\n        const naverLoginData = {\r\n          userId: naverLogin.user.id,\r\n          userEmail: naverLogin.user.email,\r\n          userName: naverLogin.user.nickname,\r\n          userImage: naverLogin.user.profileImage,\r\n        };\r\n        const res = await naverSocialLogin(naverLoginData);\r\n\r\n        // 로그인 성공 여부에 따라 처리\r\n        if (res.success) {\r\n          console.log('로그인 성공');\r\n          document.cookie = serialize('userId', naverLoginData.userId, { path: '/' });\r\n          document.cookie = serialize('userEmail', naverLoginData.userEmail, { path: '/' });\r\n          document.cookie = serialize('userName', naverLoginData.userName, { path: '/' });\r\n          document.cookie = serialize('userImage', naverLoginData.userImage, { path: '/' });\r\n          // 여기서 원하는 경로로 리다이렉트 또는 상태를 변경하여 처리할 수 있습니다.\r\n        } else {\r\n          console.log('백엔드에서 로그인 처리 실패:', res.error);\r\n        }\r\n      } else {\r\n        console.log('네이버 아이디로 로그인을 취소하였습니다.');\r\n      }\r\n    } catch (error) {\r\n      console.error('네이버 아이디로 로그인 실패:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={{ textAlign: 'center' }}>\r\n      <img\r\n        src=\"/images/logo/naver.png\"\r\n        alt=\"네이버 로그인\"\r\n        style={{ width: '70px', height: '70px', cursor: 'pointer' }}\r\n        onClick={handleNaverLogin}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NaverLogin;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}