{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { directorInfoDB } from '../../axios/main/movieLogic';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MovieDetailMidSection2 = ({\n  movieDetail\n}) => {\n  _s();\n  const [directors, setDirectors] = useState([]);\n  useEffect(() => {\n    const getDirectorInfo = async directorId => {\n      try {\n        const res = await directorInfoDB(directorId);\n        return res;\n      } catch (error) {\n        console.log('감독 정보 로드 실패 : ', error);\n        return null;\n      }\n    };\n    const fetchDirectorsInfo = async () => {\n      if (!movieDetail.directorId) {\n        return; // movieDetail.directorId가 없는 경우 처리\n      }\n\n      const directorIds = movieDetail.directorId.split(','); // 여러 개의 directorId를 배열로 분리\n      const directorsInfo = await Promise.all(directorIds.map(getDirectorInfo));\n      setDirectors(directorsInfo.filter(info => info !== null));\n    };\n    fetchDirectorsInfo();\n  }, [movieDetail.directorId]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n_s(MovieDetailMidSection2, \"MOMXR1SbmS2ZUbc3rI2O9ok3sSA=\");\n_c = MovieDetailMidSection2;\nexport default MovieDetailMidSection2;\nvar _c;\n$RefreshReg$(_c, \"MovieDetailMidSection2\");","map":{"version":3,"names":["React","useEffect","useState","directorInfoDB","Fragment","_Fragment","jsxDEV","_jsxDEV","MovieDetailMidSection2","movieDetail","_s","directors","setDirectors","getDirectorInfo","directorId","res","error","console","log","fetchDirectorsInfo","directorIds","split","directorsInfo","Promise","all","map","filter","info","_c","$RefreshReg$"],"sources":["C:/Users/carax/Desktop/사이드 프로젝트/SFDB-Project/front/src/pages/detail/MovieDetailMidSection2.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { directorInfoDB } from '../../axios/main/movieLogic'\r\n\r\nconst MovieDetailMidSection2 = ({ movieDetail }) => {\r\n  const [directors, setDirectors] = useState([])\r\n\r\n\r\n  useEffect(() => {\r\n    const getDirectorInfo = async (directorId) => {\r\n      try {\r\n        const res = await directorInfoDB(directorId)\r\n        return res;\r\n      } catch (error) {\r\n        console.log('감독 정보 로드 실패 : ', error);\r\n        return null;\r\n      }\r\n    }\r\n\r\n    const fetchDirectorsInfo = async () => {\r\n      if (!movieDetail.directorId) {\r\n        return; // movieDetail.directorId가 없는 경우 처리\r\n      }\r\n\r\n      const directorIds = movieDetail.directorId.split(','); // 여러 개의 directorId를 배열로 분리\r\n      const directorsInfo = await Promise.all(directorIds.map(getDirectorInfo));\r\n      setDirectors(directorsInfo.filter(info => info !== null));\r\n    }\r\n    fetchDirectorsInfo();\r\n  }, [movieDetail.directorId])\r\n\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n    \r\n    </>\r\n  )\r\n}\r\n\r\nexport default MovieDetailMidSection2"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,cAAc,QAAQ,6BAA6B;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE5D,MAAMC,sBAAsB,GAAGA,CAAC;EAAEC;AAAY,CAAC,KAAK;EAAAC,EAAA;EAClD,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAG9CD,SAAS,CAAC,MAAM;IACd,MAAMY,eAAe,GAAG,MAAOC,UAAU,IAAK;MAC5C,IAAI;QACF,MAAMC,GAAG,GAAG,MAAMZ,cAAc,CAACW,UAAU,CAAC;QAC5C,OAAOC,GAAG;MACZ,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEF,KAAK,CAAC;QACpC,OAAO,IAAI;MACb;IACF,CAAC;IAED,MAAMG,kBAAkB,GAAG,MAAAA,CAAA,KAAY;MACrC,IAAI,CAACV,WAAW,CAACK,UAAU,EAAE;QAC3B,OAAO,CAAC;MACV;;MAEA,MAAMM,WAAW,GAAGX,WAAW,CAACK,UAAU,CAACO,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;MACvD,MAAMC,aAAa,GAAG,MAAMC,OAAO,CAACC,GAAG,CAACJ,WAAW,CAACK,GAAG,CAACZ,eAAe,CAAC,CAAC;MACzED,YAAY,CAACU,aAAa,CAACI,MAAM,CAACC,IAAI,IAAIA,IAAI,KAAK,IAAI,CAAC,CAAC;IAC3D,CAAC;IACDR,kBAAkB,CAAC,CAAC;EACtB,CAAC,EAAE,CAACV,WAAW,CAACK,UAAU,CAAC,CAAC;EAK5B,oBACEP,OAAA,CAAAF,SAAA,mBAEE,CAAC;AAEP,CAAC;AAAAK,EAAA,CAnCKF,sBAAsB;AAAAoB,EAAA,GAAtBpB,sBAAsB;AAqC5B,eAAeA,sBAAsB;AAAA,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}