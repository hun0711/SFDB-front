{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\carax\\\\Desktop\\\\\\uC0AC\\uC774\\uB4DC \\uD504\\uB85C\\uC81D\\uD2B8\\\\SFDB-Project\\\\front\\\\src\\\\components\\\\UploadImage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { actorListDB, directorListDB } from '../axios/main/movieLogic';\nimport { getNaverImageApi } from '../utils/naverImageApi';\nimport { firebaseStorage } from '../utils/firebase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UploadImage = () => {\n  _s();\n  const [directorList, setDirectorList] = useState([]);\n  const [actorList, setActorList] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      const directors = await directorListDB();\n      const actors = await actorListDB();\n      setDirectorList(directors);\n      setActorList(actors);\n    };\n    fetchData();\n  }, []);\n  const uploadImage = async (item, folder) => {\n    try {\n      const imageData = await getNaverImageApi(item.actorNm || item.directorNm);\n      const imageRef = firebaseStorage.ref(`${folder}/${item.actorNm || item.directorNm}.jpg`);\n      await imageRef.put(imageData);\n      console.log(`${item.actorNm || item.directorNm} 이미지 업로드 완료`);\n    } catch (error) {\n      console.error(`이미지 업로드 실패: ${error.message}`);\n    }\n  };\n  useEffect(() => {\n    const uploadDirectorsImages = async () => {\n      await Promise.all(directorList.map(director => uploadImage(director, 'director')));\n    };\n    if (directorList.length > 0) {\n      uploadDirectorsImages();\n    }\n  }, [directorList]);\n  useEffect(() => {\n    const uploadActorsImages = async () => {\n      await Promise.all(actorList.map(actor => uploadImage(actor, 'actor')));\n    };\n    if (actorList.length > 0) {\n      uploadActorsImages();\n    }\n  }, [actorList]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"UploadImage\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n_s(UploadImage, \"2FpbJGhJW4At/rhyOLdJizadAfU=\");\n_c = UploadImage;\nexport default UploadImage;\nvar _c;\n$RefreshReg$(_c, \"UploadImage\");","map":{"version":3,"names":["React","useEffect","useState","actorListDB","directorListDB","getNaverImageApi","firebaseStorage","jsxDEV","_jsxDEV","UploadImage","_s","directorList","setDirectorList","actorList","setActorList","fetchData","directors","actors","uploadImage","item","folder","imageData","actorNm","directorNm","imageRef","ref","put","console","log","error","message","uploadDirectorsImages","Promise","all","map","director","length","uploadActorsImages","actor","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/carax/Desktop/사이드 프로젝트/SFDB-Project/front/src/components/UploadImage.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { actorListDB, directorListDB } from '../axios/main/movieLogic';\r\nimport { getNaverImageApi } from '../utils/naverImageApi';\r\nimport { firebaseStorage } from '../utils/firebase';\r\n\r\nconst UploadImage = () => {\r\n  const [directorList, setDirectorList] = useState([]);\r\n  const [actorList, setActorList] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const directors = await directorListDB();\r\n      const actors = await actorListDB();\r\n\r\n      setDirectorList(directors);\r\n      setActorList(actors);\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  const uploadImage = async (item, folder) => {\r\n    try {\r\n      const imageData = await getNaverImageApi(item.actorNm || item.directorNm);\r\n      const imageRef = firebaseStorage.ref(`${folder}/${item.actorNm || item.directorNm}.jpg`);\r\n      await imageRef.put(imageData);\r\n      console.log(`${item.actorNm || item.directorNm} 이미지 업로드 완료`);\r\n    } catch (error) {\r\n      console.error(`이미지 업로드 실패: ${error.message}`);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const uploadDirectorsImages = async () => {\r\n      await Promise.all(directorList.map((director) => uploadImage(director, 'director')));\r\n    };\r\n\r\n    if (directorList.length > 0) {\r\n      uploadDirectorsImages();\r\n    }\r\n  }, [directorList]);\r\n\r\n  useEffect(() => {\r\n    const uploadActorsImages = async () => {\r\n      await Promise.all(actorList.map((actor) => uploadImage(actor, 'actor')));\r\n    };\r\n\r\n    if (actorList.length > 0) {\r\n      uploadActorsImages();\r\n    }\r\n  }, [actorList]);\r\n\r\n\r\n\r\n  return (\r\n    <div>UploadImage</div>\r\n   )\r\n  }\r\n\r\nexport default UploadImage"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,WAAW,EAAEC,cAAc,QAAQ,0BAA0B;AACtE,SAASC,gBAAgB,QAAQ,wBAAwB;AACzD,SAASC,eAAe,QAAQ,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpD,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACW,SAAS,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAE9CD,SAAS,CAAC,MAAM;IACd,MAAMc,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,MAAMC,SAAS,GAAG,MAAMZ,cAAc,CAAC,CAAC;MACxC,MAAMa,MAAM,GAAG,MAAMd,WAAW,CAAC,CAAC;MAElCS,eAAe,CAACI,SAAS,CAAC;MAC1BF,YAAY,CAACG,MAAM,CAAC;IACtB,CAAC;IAEDF,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMG,WAAW,GAAG,MAAAA,CAAOC,IAAI,EAAEC,MAAM,KAAK;IAC1C,IAAI;MACF,MAAMC,SAAS,GAAG,MAAMhB,gBAAgB,CAACc,IAAI,CAACG,OAAO,IAAIH,IAAI,CAACI,UAAU,CAAC;MACzE,MAAMC,QAAQ,GAAGlB,eAAe,CAACmB,GAAG,CAAE,GAAEL,MAAO,IAAGD,IAAI,CAACG,OAAO,IAAIH,IAAI,CAACI,UAAW,MAAK,CAAC;MACxF,MAAMC,QAAQ,CAACE,GAAG,CAACL,SAAS,CAAC;MAC7BM,OAAO,CAACC,GAAG,CAAE,GAAET,IAAI,CAACG,OAAO,IAAIH,IAAI,CAACI,UAAW,aAAY,CAAC;IAC9D,CAAC,CAAC,OAAOM,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAE,eAAcA,KAAK,CAACC,OAAQ,EAAC,CAAC;IAC/C;EACF,CAAC;EAED7B,SAAS,CAAC,MAAM;IACd,MAAM8B,qBAAqB,GAAG,MAAAA,CAAA,KAAY;MACxC,MAAMC,OAAO,CAACC,GAAG,CAACtB,YAAY,CAACuB,GAAG,CAAEC,QAAQ,IAAKjB,WAAW,CAACiB,QAAQ,EAAE,UAAU,CAAC,CAAC,CAAC;IACtF,CAAC;IAED,IAAIxB,YAAY,CAACyB,MAAM,GAAG,CAAC,EAAE;MAC3BL,qBAAqB,CAAC,CAAC;IACzB;EACF,CAAC,EAAE,CAACpB,YAAY,CAAC,CAAC;EAElBV,SAAS,CAAC,MAAM;IACd,MAAMoC,kBAAkB,GAAG,MAAAA,CAAA,KAAY;MACrC,MAAML,OAAO,CAACC,GAAG,CAACpB,SAAS,CAACqB,GAAG,CAAEI,KAAK,IAAKpB,WAAW,CAACoB,KAAK,EAAE,OAAO,CAAC,CAAC,CAAC;IAC1E,CAAC;IAED,IAAIzB,SAAS,CAACuB,MAAM,GAAG,CAAC,EAAE;MACxBC,kBAAkB,CAAC,CAAC;IACtB;EACF,CAAC,EAAE,CAACxB,SAAS,CAAC,CAAC;EAIf,oBACEL,OAAA;IAAA+B,QAAA,EAAK;EAAW;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;AAExB,CAAC;AAAAjC,EAAA,CApDGD,WAAW;AAAAmC,EAAA,GAAXnC,WAAW;AAsDjB,eAAeA,WAAW;AAAA,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}